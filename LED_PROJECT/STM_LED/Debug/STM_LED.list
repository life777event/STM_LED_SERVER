
STM_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006834  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080069bc  080069bc  000169bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a70  08006a70  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08006a70  08006a70  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a70  08006a70  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a74  08006a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08006a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011cc  2000017c  08006bf4  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001348  08006bf4  00021348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139fb  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d17  00000000  00000000  00033ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  000368c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  00037558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a9b0  00000000  00000000  00038098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d735  00000000  00000000  00052a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088403  00000000  00000000  0006017d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8580  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003200  00000000  00000000  000e85fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080069a4 	.word	0x080069a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	080069a4 	.word	0x080069a4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <HAL_Init+0x28>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_Init+0x28>)
 80001e2:	f043 0310 	orr.w	r3, r3, #16
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e8:	2003      	movs	r0, #3
 80001ea:	f000 f92b 	bl	8000444 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ee:	2000      	movs	r0, #0
 80001f0:	f000 f808 	bl	8000204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f4:	f005 fe08 	bl	8005e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f8:	2300      	movs	r3, #0
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40022000 	.word	0x40022000

08000204 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <HAL_InitTick+0x54>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <HAL_InitTick+0x58>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f943 	bl	80004ae <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e00e      	b.n	8000250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2b0f      	cmp	r3, #15
 8000236:	d80a      	bhi.n	800024e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000238:	2200      	movs	r2, #0
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000240:	f000 f90b 	bl	800045a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000244:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_InitTick+0x5c>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800024a:	2300      	movs	r3, #0
 800024c:	e000      	b.n	8000250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800024e:	2301      	movs	r3, #1
}
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000118 	.word	0x20000118
 800025c:	20000004 	.word	0x20000004
 8000260:	20000000 	.word	0x20000000

08000264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_IncTick+0x20>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	461a      	mov	r2, r3
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <HAL_IncTick+0x24>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4413      	add	r3, r2
 8000274:	4a04      	ldr	r2, [pc, #16]	; (8000288 <HAL_IncTick+0x24>)
 8000276:	6013      	str	r3, [r2, #0]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	20000004 	.word	0x20000004
 8000288:	200003bc 	.word	0x200003bc

0800028c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <HAL_GetTick+0x14>)
 8000292:	681b      	ldr	r3, [r3, #0]
}
 8000294:	4618      	mov	r0, r3
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	200003bc 	.word	0x200003bc

080002a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f003 0307 	and.w	r3, r3, #7
 80002b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <__NVIC_SetPriorityGrouping+0x44>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ba:	68ba      	ldr	r2, [r7, #8]
 80002bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c0:	4013      	ands	r3, r2
 80002c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002d6:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <__NVIC_SetPriorityGrouping+0x44>)
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	60d3      	str	r3, [r2, #12]
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <__NVIC_GetPriorityGrouping+0x18>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	0a1b      	lsrs	r3, r3, #8
 80002f6:	f003 0307 	and.w	r3, r3, #7
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	2b00      	cmp	r3, #0
 8000318:	db0b      	blt.n	8000332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	f003 021f 	and.w	r2, r3, #31
 8000320:	4907      	ldr	r1, [pc, #28]	; (8000340 <__NVIC_EnableIRQ+0x38>)
 8000322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000326:	095b      	lsrs	r3, r3, #5
 8000328:	2001      	movs	r0, #1
 800032a:	fa00 f202 	lsl.w	r2, r0, r2
 800032e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000e100 	.word	0xe000e100

08000344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	6039      	str	r1, [r7, #0]
 800034e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	db0a      	blt.n	800036e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b2da      	uxtb	r2, r3
 800035c:	490c      	ldr	r1, [pc, #48]	; (8000390 <__NVIC_SetPriority+0x4c>)
 800035e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000362:	0112      	lsls	r2, r2, #4
 8000364:	b2d2      	uxtb	r2, r2
 8000366:	440b      	add	r3, r1
 8000368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800036c:	e00a      	b.n	8000384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4908      	ldr	r1, [pc, #32]	; (8000394 <__NVIC_SetPriority+0x50>)
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	f003 030f 	and.w	r3, r3, #15
 800037a:	3b04      	subs	r3, #4
 800037c:	0112      	lsls	r2, r2, #4
 800037e:	b2d2      	uxtb	r2, r2
 8000380:	440b      	add	r3, r1
 8000382:	761a      	strb	r2, [r3, #24]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	e000e100 	.word	0xe000e100
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000398:	b480      	push	{r7}
 800039a:	b089      	sub	sp, #36	; 0x24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f003 0307 	and.w	r3, r3, #7
 80003aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	f1c3 0307 	rsb	r3, r3, #7
 80003b2:	2b04      	cmp	r3, #4
 80003b4:	bf28      	it	cs
 80003b6:	2304      	movcs	r3, #4
 80003b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3304      	adds	r3, #4
 80003be:	2b06      	cmp	r3, #6
 80003c0:	d902      	bls.n	80003c8 <NVIC_EncodePriority+0x30>
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3b03      	subs	r3, #3
 80003c6:	e000      	b.n	80003ca <NVIC_EncodePriority+0x32>
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	fa02 f303 	lsl.w	r3, r2, r3
 80003d6:	43da      	mvns	r2, r3
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	401a      	ands	r2, r3
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	43d9      	mvns	r1, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f0:	4313      	orrs	r3, r2
         );
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3724      	adds	r7, #36	; 0x24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
	...

08000400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	3b01      	subs	r3, #1
 800040c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000410:	d301      	bcc.n	8000416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000412:	2301      	movs	r3, #1
 8000414:	e00f      	b.n	8000436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <SysTick_Config+0x40>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3b01      	subs	r3, #1
 800041c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800041e:	210f      	movs	r1, #15
 8000420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000424:	f7ff ff8e 	bl	8000344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <SysTick_Config+0x40>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800042e:	4b04      	ldr	r3, [pc, #16]	; (8000440 <SysTick_Config+0x40>)
 8000430:	2207      	movs	r2, #7
 8000432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000434:	2300      	movs	r3, #0
}
 8000436:	4618      	mov	r0, r3
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	e000e010 	.word	0xe000e010

08000444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f7ff ff29 	bl	80002a4 <__NVIC_SetPriorityGrouping>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b086      	sub	sp, #24
 800045e:	af00      	add	r7, sp, #0
 8000460:	4603      	mov	r3, r0
 8000462:	60b9      	str	r1, [r7, #8]
 8000464:	607a      	str	r2, [r7, #4]
 8000466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800046c:	f7ff ff3e 	bl	80002ec <__NVIC_GetPriorityGrouping>
 8000470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	68b9      	ldr	r1, [r7, #8]
 8000476:	6978      	ldr	r0, [r7, #20]
 8000478:	f7ff ff8e 	bl	8000398 <NVIC_EncodePriority>
 800047c:	4602      	mov	r2, r0
 800047e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000482:	4611      	mov	r1, r2
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff5d 	bl	8000344 <__NVIC_SetPriority>
}
 800048a:	bf00      	nop
 800048c:	3718      	adds	r7, #24
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	4603      	mov	r3, r0
 800049a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800049c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff31 	bl	8000308 <__NVIC_EnableIRQ>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b082      	sub	sp, #8
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f7ff ffa2 	bl	8000400 <SysTick_Config>
 80004bc:	4603      	mov	r3, r0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b087      	sub	sp, #28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004d6:	e14e      	b.n	8000776 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	2101      	movs	r1, #1
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	fa01 f303 	lsl.w	r3, r1, r3
 80004e4:	4013      	ands	r3, r2
 80004e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	f000 8140 	beq.w	8000770 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d003      	beq.n	8000500 <HAL_GPIO_Init+0x38>
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	2b12      	cmp	r3, #18
 80004fe:	d123      	bne.n	8000548 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	08da      	lsrs	r2, r3, #3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	3208      	adds	r2, #8
 8000508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800050c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	f003 0307 	and.w	r3, r3, #7
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	220f      	movs	r2, #15
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	693a      	ldr	r2, [r7, #16]
 8000520:	4013      	ands	r3, r2
 8000522:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	691a      	ldr	r2, [r3, #16]
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	f003 0307 	and.w	r3, r3, #7
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	693a      	ldr	r2, [r7, #16]
 8000536:	4313      	orrs	r3, r2
 8000538:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	08da      	lsrs	r2, r3, #3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3208      	adds	r2, #8
 8000542:	6939      	ldr	r1, [r7, #16]
 8000544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	2203      	movs	r2, #3
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
 8000558:	43db      	mvns	r3, r3
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	4013      	ands	r3, r2
 800055e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	f003 0203 	and.w	r2, r3, #3
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	fa02 f303 	lsl.w	r3, r2, r3
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	4313      	orrs	r3, r2
 8000574:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	693a      	ldr	r2, [r7, #16]
 800057a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d00b      	beq.n	800059c <HAL_GPIO_Init+0xd4>
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	2b02      	cmp	r3, #2
 800058a:	d007      	beq.n	800059c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000590:	2b11      	cmp	r3, #17
 8000592:	d003      	beq.n	800059c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	2b12      	cmp	r3, #18
 800059a:	d130      	bne.n	80005fe <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	2203      	movs	r2, #3
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	43db      	mvns	r3, r3
 80005ae:	693a      	ldr	r2, [r7, #16]
 80005b0:	4013      	ands	r3, r2
 80005b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	68da      	ldr	r2, [r3, #12]
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	fa02 f303 	lsl.w	r3, r2, r3
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	693a      	ldr	r2, [r7, #16]
 80005ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005d2:	2201      	movs	r2, #1
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	43db      	mvns	r3, r3
 80005dc:	693a      	ldr	r2, [r7, #16]
 80005de:	4013      	ands	r3, r2
 80005e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	091b      	lsrs	r3, r3, #4
 80005e8:	f003 0201 	and.w	r2, r3, #1
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	2203      	movs	r2, #3
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	43db      	mvns	r3, r3
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4013      	ands	r3, r2
 8000614:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	689a      	ldr	r2, [r3, #8]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	4313      	orrs	r3, r2
 8000626:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000636:	2b00      	cmp	r3, #0
 8000638:	f000 809a 	beq.w	8000770 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063c:	4b55      	ldr	r3, [pc, #340]	; (8000794 <HAL_GPIO_Init+0x2cc>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a54      	ldr	r2, [pc, #336]	; (8000794 <HAL_GPIO_Init+0x2cc>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b52      	ldr	r3, [pc, #328]	; (8000794 <HAL_GPIO_Init+0x2cc>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000654:	4a50      	ldr	r2, [pc, #320]	; (8000798 <HAL_GPIO_Init+0x2d0>)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	089b      	lsrs	r3, r3, #2
 800065a:	3302      	adds	r3, #2
 800065c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	f003 0303 	and.w	r3, r3, #3
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	220f      	movs	r2, #15
 800066c:	fa02 f303 	lsl.w	r3, r2, r3
 8000670:	43db      	mvns	r3, r3
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	4013      	ands	r3, r2
 8000676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800067e:	d013      	beq.n	80006a8 <HAL_GPIO_Init+0x1e0>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a46      	ldr	r2, [pc, #280]	; (800079c <HAL_GPIO_Init+0x2d4>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d00d      	beq.n	80006a4 <HAL_GPIO_Init+0x1dc>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a45      	ldr	r2, [pc, #276]	; (80007a0 <HAL_GPIO_Init+0x2d8>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d007      	beq.n	80006a0 <HAL_GPIO_Init+0x1d8>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a44      	ldr	r2, [pc, #272]	; (80007a4 <HAL_GPIO_Init+0x2dc>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d101      	bne.n	800069c <HAL_GPIO_Init+0x1d4>
 8000698:	2303      	movs	r3, #3
 800069a:	e006      	b.n	80006aa <HAL_GPIO_Init+0x1e2>
 800069c:	2305      	movs	r3, #5
 800069e:	e004      	b.n	80006aa <HAL_GPIO_Init+0x1e2>
 80006a0:	2302      	movs	r3, #2
 80006a2:	e002      	b.n	80006aa <HAL_GPIO_Init+0x1e2>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <HAL_GPIO_Init+0x1e2>
 80006a8:	2300      	movs	r3, #0
 80006aa:	697a      	ldr	r2, [r7, #20]
 80006ac:	f002 0203 	and.w	r2, r2, #3
 80006b0:	0092      	lsls	r2, r2, #2
 80006b2:	4093      	lsls	r3, r2
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80006ba:	4937      	ldr	r1, [pc, #220]	; (8000798 <HAL_GPIO_Init+0x2d0>)
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	089b      	lsrs	r3, r3, #2
 80006c0:	3302      	adds	r3, #2
 80006c2:	693a      	ldr	r2, [r7, #16]
 80006c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006c8:	4b37      	ldr	r3, [pc, #220]	; (80007a8 <HAL_GPIO_Init+0x2e0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	43db      	mvns	r3, r3
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	4013      	ands	r3, r2
 80006d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d003      	beq.n	80006ec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006ec:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <HAL_GPIO_Init+0x2e0>)
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <HAL_GPIO_Init+0x2e0>)
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	693a      	ldr	r2, [r7, #16]
 80006fe:	4013      	ands	r3, r2
 8000700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4313      	orrs	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000716:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <HAL_GPIO_Init+0x2e0>)
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <HAL_GPIO_Init+0x2e0>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	43db      	mvns	r3, r3
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	4013      	ands	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000740:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <HAL_GPIO_Init+0x2e0>)
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <HAL_GPIO_Init+0x2e0>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	43db      	mvns	r3, r3
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	4013      	ands	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075e:	2b00      	cmp	r3, #0
 8000760:	d003      	beq.n	800076a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4313      	orrs	r3, r2
 8000768:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800076a:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <HAL_GPIO_Init+0x2e0>)
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	3301      	adds	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	fa22 f303 	lsr.w	r3, r2, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	f47f aea9 	bne.w	80004d8 <HAL_GPIO_Init+0x10>
  }
}
 8000786:	bf00      	nop
 8000788:	371c      	adds	r7, #28
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	40010000 	.word	0x40010000
 800079c:	48000400 	.word	0x48000400
 80007a0:	48000800 	.word	0x48000800
 80007a4:	48000c00 	.word	0x48000c00
 80007a8:	40010400 	.word	0x40010400

080007ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	807b      	strh	r3, [r7, #2]
 80007b8:	4613      	mov	r3, r2
 80007ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007bc:	787b      	ldrb	r3, [r7, #1]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d003      	beq.n	80007ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007c2:	887a      	ldrh	r2, [r7, #2]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007c8:	e002      	b.n	80007d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007ca:	887a      	ldrh	r2, [r7, #2]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	b08b      	sub	sp, #44	; 0x2c
 80007e0:	af06      	add	r7, sp, #24
 80007e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e0a6      	b.n	800093c <HAL_PCD_Init+0x160>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d106      	bne.n	8000808 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f005 fcc8 	bl	8006198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2203      	movs	r2, #3
 800080c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f002 fd31 	bl	800327c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e035      	b.n	800088c <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	015b      	lsls	r3, r3, #5
 8000826:	4413      	add	r3, r2
 8000828:	3329      	adds	r3, #41	; 0x29
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	015b      	lsls	r3, r3, #5
 8000834:	4413      	add	r3, r2
 8000836:	3328      	adds	r3, #40	; 0x28
 8000838:	7bfa      	ldrb	r2, [r7, #15]
 800083a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	7bfa      	ldrb	r2, [r7, #15]
 8000840:	b291      	uxth	r1, r2
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	015b      	lsls	r3, r3, #5
 8000846:	4413      	add	r3, r2
 8000848:	3336      	adds	r3, #54	; 0x36
 800084a:	460a      	mov	r2, r1
 800084c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	015b      	lsls	r3, r3, #5
 8000854:	4413      	add	r3, r2
 8000856:	332b      	adds	r3, #43	; 0x2b
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	015b      	lsls	r3, r3, #5
 8000862:	4413      	add	r3, r2
 8000864:	3338      	adds	r3, #56	; 0x38
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	015b      	lsls	r3, r3, #5
 8000870:	4413      	add	r3, r2
 8000872:	333c      	adds	r3, #60	; 0x3c
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	3302      	adds	r3, #2
 800087e:	015b      	lsls	r3, r3, #5
 8000880:	4413      	add	r3, r2
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	3301      	adds	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	7bfa      	ldrb	r2, [r7, #15]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	429a      	cmp	r2, r3
 8000894:	d3c4      	bcc.n	8000820 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]
 800089a:	e031      	b.n	8000900 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	015b      	lsls	r3, r3, #5
 80008a2:	4413      	add	r3, r2
 80008a4:	f203 1329 	addw	r3, r3, #297	; 0x129
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	015b      	lsls	r3, r3, #5
 80008b2:	4413      	add	r3, r2
 80008b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80008b8:	7bfa      	ldrb	r2, [r7, #15]
 80008ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	015b      	lsls	r3, r3, #5
 80008c2:	4413      	add	r3, r2
 80008c4:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	015b      	lsls	r3, r3, #5
 80008d2:	4413      	add	r3, r2
 80008d4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	015b      	lsls	r3, r3, #5
 80008e2:	4413      	add	r3, r2
 80008e4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	330a      	adds	r3, #10
 80008f2:	015b      	lsls	r3, r3, #5
 80008f4:	4413      	add	r3, r2
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	3301      	adds	r3, #1
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	7bfa      	ldrb	r2, [r7, #15]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	429a      	cmp	r2, r3
 8000908:	d3c8      	bcc.n	800089c <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	687e      	ldr	r6, [r7, #4]
 8000912:	466d      	mov	r5, sp
 8000914:	f106 0410 	add.w	r4, r6, #16
 8000918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800091a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	602b      	str	r3, [r5, #0]
 8000920:	1d33      	adds	r3, r6, #4
 8000922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f002 fcc6 	bl	80032b6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000944 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000952:	2b01      	cmp	r3, #1
 8000954:	d101      	bne.n	800095a <HAL_PCD_Start+0x16>
 8000956:	2302      	movs	r3, #2
 8000958:	e016      	b.n	8000988 <HAL_PCD_Start+0x44>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000962:	2101      	movs	r1, #1
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f005 fe81 	bl	800666c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fd0c 	bl	800438c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f002 fc67 	bl	800324c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f003 fd00 	bl	80043a2 <USB_ReadInterrupts>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009ac:	d102      	bne.n	80009b4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 fae8 	bl	8000f84 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 fcf2 	bl	80043a2 <USB_ReadInterrupts>
 80009be:	4603      	mov	r3, r0
 80009c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009c8:	d112      	bne.n	80009f0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009dc:	b292      	uxth	r2, r2
 80009de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f005 fc4d 	bl	8006282 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80009e8:	2100      	movs	r1, #0
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 f8d2 	bl	8000b94 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fcd4 	bl	80043a2 <USB_ReadInterrupts>
 80009fa:	4603      	mov	r3, r0
 80009fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a04:	d10b      	bne.n	8000a1e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a18:	b292      	uxth	r2, r2
 8000a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fcbd 	bl	80043a2 <USB_ReadInterrupts>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a32:	d10b      	bne.n	8000a4c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a46:	b292      	uxth	r2, r2
 8000a48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fca6 	bl	80043a2 <USB_ReadInterrupts>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a60:	d126      	bne.n	8000ab0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f022 0204 	bic.w	r2, r2, #4
 8000a74:	b292      	uxth	r2, r2
 8000a76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 0208 	bic.w	r2, r2, #8
 8000a8c:	b292      	uxth	r2, r2
 8000a8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f005 fc2e 	bl	80062f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000aaa:	b292      	uxth	r2, r2
 8000aac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fc74 	bl	80043a2 <USB_ReadInterrupts>
 8000aba:	4603      	mov	r3, r0
 8000abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ac4:	d131      	bne.n	8000b2a <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f042 0208 	orr.w	r2, r2, #8
 8000ad8:	b292      	uxth	r2, r2
 8000ada:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000af0:	b292      	uxth	r2, r2
 8000af2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f042 0204 	orr.w	r2, r2, #4
 8000b08:	b292      	uxth	r2, r2
 8000b0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 fc45 	bl	80043a2 <USB_ReadInterrupts>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b22:	d002      	beq.n	8000b2a <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f005 fbcb 	bl	80062c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fc37 	bl	80043a2 <USB_ReadInterrupts>
 8000b34:	4603      	mov	r3, r0
 8000b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b3e:	d10e      	bne.n	8000b5e <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b52:	b292      	uxth	r2, r2
 8000b54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f005 fb84 	bl	8006266 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 fc1d 	bl	80043a2 <USB_ReadInterrupts>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b72:	d10b      	bne.n	8000b8c <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b86:	b292      	uxth	r2, r2
 8000b88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d101      	bne.n	8000bae <HAL_PCD_SetAddress+0x1a>
 8000baa:	2302      	movs	r3, #2
 8000bac:	e013      	b.n	8000bd6 <HAL_PCD_SetAddress+0x42>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	78fa      	ldrb	r2, [r7, #3]
 8000bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	78fa      	ldrb	r2, [r7, #3]
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 fbcc 	bl	8004364 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b084      	sub	sp, #16
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	4608      	mov	r0, r1
 8000be8:	4611      	mov	r1, r2
 8000bea:	461a      	mov	r2, r3
 8000bec:	4603      	mov	r3, r0
 8000bee:	70fb      	strb	r3, [r7, #3]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	803b      	strh	r3, [r7, #0]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	da0b      	bge.n	8000c1c <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	015b      	lsls	r3, r3, #5
 8000c0c:	3328      	adds	r3, #40	; 0x28
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2201      	movs	r2, #1
 8000c18:	705a      	strb	r2, [r3, #1]
 8000c1a:	e00b      	b.n	8000c34 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	015b      	lsls	r3, r3, #5
 8000c24:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2200      	movs	r2, #0
 8000c32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c40:	883a      	ldrh	r2, [r7, #0]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	78ba      	ldrb	r2, [r7, #2]
 8000c4a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	785b      	ldrb	r3, [r3, #1]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c5e:	78bb      	ldrb	r3, [r7, #2]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d102      	bne.n	8000c6a <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2200      	movs	r2, #0
 8000c68:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d101      	bne.n	8000c78 <HAL_PCD_EP_Open+0x9a>
 8000c74:	2302      	movs	r3, #2
 8000c76:	e00e      	b.n	8000c96 <HAL_PCD_EP_Open+0xb8>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	68f9      	ldr	r1, [r7, #12]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fb3a 	bl	8003300 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000c94:	7afb      	ldrb	r3, [r7, #11]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	da0b      	bge.n	8000cca <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	015b      	lsls	r3, r3, #5
 8000cba:	3328      	adds	r3, #40	; 0x28
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	705a      	strb	r2, [r3, #1]
 8000cc8:	e00b      	b.n	8000ce2 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	015b      	lsls	r3, r3, #5
 8000cd2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d101      	bne.n	8000cfc <HAL_PCD_EP_Close+0x5e>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e00e      	b.n	8000d1a <HAL_PCD_EP_Close+0x7c>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	68f9      	ldr	r1, [r7, #12]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 fdec 	bl	80038e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d32:	7afb      	ldrb	r3, [r7, #11]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	015b      	lsls	r3, r3, #5
 8000d3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4413      	add	r3, r2
 8000d42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d5c:	7afb      	ldrb	r3, [r7, #11]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000d68:	7afb      	ldrb	r3, [r7, #11]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d106      	bne.n	8000d80 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6979      	ldr	r1, [r7, #20]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 ff4b 	bl	8003c14 <USB_EPStartXfer>
 8000d7e:	e005      	b.n	8000d8c <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6979      	ldr	r1, [r7, #20]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 ff44 	bl	8003c14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	330a      	adds	r3, #10
 8000dac:	015b      	lsls	r3, r3, #5
 8000dae:	4413      	add	r3, r2
 8000db0:	3304      	adds	r3, #4
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000dd0:	7afb      	ldrb	r3, [r7, #11]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	015b      	lsls	r3, r3, #5
 8000dd8:	3328      	adds	r3, #40	; 0x28
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2201      	movs	r2, #1
 8000df6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000df8:	7afb      	ldrb	r3, [r7, #11]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d106      	bne.n	8000e1c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6979      	ldr	r1, [r7, #20]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 fefd 	bl	8003c14 <USB_EPStartXfer>
 8000e1a:	e005      	b.n	8000e28 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6979      	ldr	r1, [r7, #20]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fef6 	bl	8003c14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e3e:	78fb      	ldrb	r3, [r7, #3]
 8000e40:	f003 0207 	and.w	r2, r3, #7
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d901      	bls.n	8000e50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e046      	b.n	8000ede <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	da0b      	bge.n	8000e70 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	015b      	lsls	r3, r3, #5
 8000e60:	3328      	adds	r3, #40	; 0x28
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	705a      	strb	r2, [r3, #1]
 8000e6e:	e009      	b.n	8000e84 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	015b      	lsls	r3, r3, #5
 8000e74:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2200      	movs	r2, #0
 8000e82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2201      	movs	r2, #1
 8000e88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d101      	bne.n	8000ea4 <HAL_PCD_EP_SetStall+0x72>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e01c      	b.n	8000ede <HAL_PCD_EP_SetStall+0xac>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68f9      	ldr	r1, [r7, #12]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 f980 	bl	80041b8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d108      	bne.n	8000ed4 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4610      	mov	r0, r2
 8000ed0:	f003 fa77 	bl	80043c2 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	f003 020f 	and.w	r2, r3, #15
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d901      	bls.n	8000f04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e03a      	b.n	8000f7a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	da0b      	bge.n	8000f24 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	015b      	lsls	r3, r3, #5
 8000f14:	3328      	adds	r3, #40	; 0x28
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	705a      	strb	r2, [r3, #1]
 8000f22:	e00b      	b.n	8000f3c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	015b      	lsls	r3, r3, #5
 8000f2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <HAL_PCD_EP_ClrStall+0x76>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e00e      	b.n	8000f7a <HAL_PCD_EP_ClrStall+0x94>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68f9      	ldr	r1, [r7, #12]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 f966 	bl	800423c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f8c:	e278      	b.n	8001480 <PCD_EP_ISR_Handler+0x4fc>
  {
    wIstr = hpcd->Instance->ISTR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f96:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000f98:	8afb      	ldrh	r3, [r7, #22]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f003 030f 	and.w	r3, r3, #15
 8000fa0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8000fa2:	7d7b      	ldrb	r3, [r7, #21]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f040 8140 	bne.w	800122a <PCD_EP_ISR_Handler+0x2a6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000faa:	8afb      	ldrh	r3, [r7, #22]
 8000fac:	f003 0310 	and.w	r3, r3, #16
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d14f      	bne.n	8001054 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fc4:	b29c      	uxth	r4, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8000fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3328      	adds	r3, #40	; 0x28
 8000fda:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	695a      	ldr	r2, [r3, #20]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	441a      	add	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001012:	2100      	movs	r1, #0
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f005 f90f 	bl	8006238 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 822c 	beq.w	8001480 <PCD_EP_ISR_Handler+0x4fc>
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	2b00      	cmp	r3, #0
 800102e:	f040 8227 	bne.w	8001480 <PCD_EP_ISR_Handler+0x4fc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001038:	b2db      	uxtb	r3, r3
 800103a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800103e:	b2da      	uxtb	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	b292      	uxth	r2, r2
 8001046:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001052:	e215      	b.n	8001480 <PCD_EP_ISR_Handler+0x4fc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800105a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001064:	8a7b      	ldrh	r3, [r7, #18]
 8001066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106a:	2b00      	cmp	r3, #0
 800106c:	d031      	beq.n	80010d2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001076:	b29b      	uxth	r3, r3
 8001078:	461a      	mov	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6812      	ldr	r2, [r2, #0]
 8001086:	4413      	add	r3, r2
 8001088:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f003 f9d7 	bl	800445c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010ba:	4013      	ands	r3, r2
 80010bc:	b29c      	uxth	r4, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80010c6:	b292      	uxth	r2, r2
 80010c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f005 f88a 	bl	80061e4 <HAL_PCD_SetupStageCallback>
 80010d0:	e1d6      	b.n	8001480 <PCD_EP_ISR_Handler+0x4fc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f280 81d2 	bge.w	8001480 <PCD_EP_ISR_Handler+0x4fc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010e8:	4013      	ands	r3, r2
 80010ea:	b29c      	uxth	r4, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80010f4:	b292      	uxth	r2, r2
 80010f6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001100:	b29b      	uxth	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4413      	add	r3, r2
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	4413      	add	r3, r2
 8001112:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d019      	beq.n	800115c <PCD_EP_ISR_Handler+0x1d8>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d015      	beq.n	800115c <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6959      	ldr	r1, [r3, #20]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001140:	b29b      	uxth	r3, r3
 8001142:	f003 f98b 	bl	800445c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	441a      	add	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001154:	2100      	movs	r1, #0
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f005 f856 	bl	8006208 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	461c      	mov	r4, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800116a:	b29b      	uxth	r3, r3
 800116c:	441c      	add	r4, r3
 800116e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d110      	bne.n	800119e <PCD_EP_ISR_Handler+0x21a>
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001184:	b29a      	uxth	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	801a      	strh	r2, [r3, #0]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001196:	b29a      	uxth	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	801a      	strh	r2, [r3, #0]
 800119c:	e02f      	b.n	80011fe <PCD_EP_ISR_Handler+0x27a>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	2b3e      	cmp	r3, #62	; 0x3e
 80011a4:	d813      	bhi.n	80011ce <PCD_EP_ISR_Handler+0x24a>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	085b      	lsrs	r3, r3, #1
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <PCD_EP_ISR_Handler+0x23c>
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	3301      	adds	r3, #1
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	029b      	lsls	r3, r3, #10
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	801a      	strh	r2, [r3, #0]
 80011cc:	e017      	b.n	80011fe <PCD_EP_ISR_Handler+0x27a>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	f003 031f 	and.w	r3, r3, #31
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <PCD_EP_ISR_Handler+0x264>
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	029b      	lsls	r3, r3, #10
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800120a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800120e:	b29c      	uxth	r4, r3
 8001210:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001214:	b29c      	uxth	r4, r3
 8001216:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800121a:	b29c      	uxth	r4, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b9e      	ldr	r3, [pc, #632]	; (800149c <PCD_EP_ISR_Handler+0x518>)
 8001222:	4323      	orrs	r3, r4
 8001224:	b29b      	uxth	r3, r3
 8001226:	8013      	strh	r3, [r2, #0]
 8001228:	e12a      	b.n	8001480 <PCD_EP_ISR_Handler+0x4fc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	7d7b      	ldrb	r3, [r7, #21]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800123a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f280 80cb 	bge.w	80013da <PCD_EP_ISR_Handler+0x456>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	7d7b      	ldrb	r3, [r7, #21]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29a      	uxth	r2, r3
 8001254:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001258:	4013      	ands	r3, r2
 800125a:	b29c      	uxth	r4, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	7d7b      	ldrb	r3, [r7, #21]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800126c:	b292      	uxth	r2, r2
 800126e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001270:	7d7b      	ldrb	r3, [r7, #21]
 8001272:	015b      	lsls	r3, r3, #5
 8001274:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	7b1b      	ldrb	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d11f      	bne.n	80012c6 <PCD_EP_ISR_Handler+0x342>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800128e:	b29b      	uxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012aa:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80012ac:	8bfb      	ldrh	r3, [r7, #30]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d06e      	beq.n	8001390 <PCD_EP_ISR_Handler+0x40c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6959      	ldr	r1, [r3, #20]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	88da      	ldrh	r2, [r3, #6]
 80012be:	8bfb      	ldrh	r3, [r7, #30]
 80012c0:	f003 f8cc 	bl	800445c <USB_ReadPMA>
 80012c4:	e064      	b.n	8001390 <PCD_EP_ISR_Handler+0x40c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d01f      	beq.n	8001320 <PCD_EP_ISR_Handler+0x39c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4413      	add	r3, r2
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001304:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001306:	8bfb      	ldrh	r3, [r7, #30]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d028      	beq.n	800135e <PCD_EP_ISR_Handler+0x3da>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6959      	ldr	r1, [r3, #20]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	891a      	ldrh	r2, [r3, #8]
 8001318:	8bfb      	ldrh	r3, [r7, #30]
 800131a:	f003 f89f 	bl	800445c <USB_ReadPMA>
 800131e:	e01e      	b.n	800135e <PCD_EP_ISR_Handler+0x3da>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001328:	b29b      	uxth	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4413      	add	r3, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	4413      	add	r3, r2
 800133a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001344:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001346:	8bfb      	ldrh	r3, [r7, #30]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d008      	beq.n	800135e <PCD_EP_ISR_Handler+0x3da>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6959      	ldr	r1, [r3, #20]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	895a      	ldrh	r2, [r3, #10]
 8001358:	8bfb      	ldrh	r3, [r7, #30]
 800135a:	f003 f87f 	bl	800445c <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001378:	b29c      	uxth	r4, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	441a      	add	r2, r3
 8001388:	4b45      	ldr	r3, [pc, #276]	; (80014a0 <PCD_EP_ISR_Handler+0x51c>)
 800138a:	4323      	orrs	r3, r4
 800138c:	b29b      	uxth	r3, r3
 800138e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	69da      	ldr	r2, [r3, #28]
 8001394:	8bfb      	ldrh	r3, [r7, #30]
 8001396:	441a      	add	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	8bfb      	ldrh	r3, [r7, #30]
 80013a2:	441a      	add	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d004      	beq.n	80013ba <PCD_EP_ISR_Handler+0x436>
 80013b0:	8bfa      	ldrh	r2, [r7, #30]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d206      	bcs.n	80013c8 <PCD_EP_ISR_Handler+0x444>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f004 ff21 	bl	8006208 <HAL_PCD_DataOutStageCallback>
 80013c6:	e008      	b.n	80013da <PCD_EP_ISR_Handler+0x456>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	7819      	ldrb	r1, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	695a      	ldr	r2, [r3, #20]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fca4 	bl	8000d22 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80013da:	8a7b      	ldrh	r3, [r7, #18]
 80013dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d04d      	beq.n	8001480 <PCD_EP_ISR_Handler+0x4fc>
      {
        ep = &hpcd->IN_ep[epindex];
 80013e4:	7d7b      	ldrb	r3, [r7, #21]
 80013e6:	015b      	lsls	r3, r3, #5
 80013e8:	3328      	adds	r3, #40	; 0x28
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	7d7b      	ldrb	r3, [r7, #21]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001408:	b29c      	uxth	r4, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	7d7b      	ldrb	r3, [r7, #21]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	441a      	add	r2, r3
 8001416:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800141a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800141e:	b29b      	uxth	r3, r3
 8001420:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800142a:	b29b      	uxth	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4413      	add	r3, r2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	4413      	add	r3, r2
 800143c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	441a      	add	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d106      	bne.n	800146e <PCD_EP_ISR_Handler+0x4ea>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f004 fee6 	bl	8006238 <HAL_PCD_DataInStageCallback>
 800146c:	e008      	b.n	8001480 <PCD_EP_ISR_Handler+0x4fc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	7819      	ldrb	r1, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fca0 	bl	8000dc0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001488:	b29b      	uxth	r3, r3
 800148a:	b21b      	sxth	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	f6ff ad7e 	blt.w	8000f8e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3724      	adds	r7, #36	; 0x24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	ffff8080 	.word	0xffff8080
 80014a0:	ffff80c0 	.word	0xffff80c0

080014a4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	817b      	strh	r3, [r7, #10]
 80014b2:	4613      	mov	r3, r2
 80014b4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80014b6:	897b      	ldrh	r3, [r7, #10]
 80014b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014bc:	b29b      	uxth	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d008      	beq.n	80014d4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c2:	897b      	ldrh	r3, [r7, #10]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	015b      	lsls	r3, r3, #5
 80014ca:	3328      	adds	r3, #40	; 0x28
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e006      	b.n	80014e2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014d4:	897b      	ldrh	r3, [r7, #10]
 80014d6:	015b      	lsls	r3, r3, #5
 80014d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80014e2:	893b      	ldrh	r3, [r7, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d107      	bne.n	80014f8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2200      	movs	r2, #0
 80014ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	80da      	strh	r2, [r3, #6]
 80014f6:	e00b      	b.n	8001510 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2201      	movs	r2, #1
 80014fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	b29a      	uxth	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	0c1b      	lsrs	r3, r3, #16
 800150a:	b29a      	uxth	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001526:	af00      	add	r7, sp, #0
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	f000 bef4 	b.w	8002322 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 816a 	beq.w	800181e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800154a:	4bb3      	ldr	r3, [pc, #716]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b04      	cmp	r3, #4
 8001554:	d00c      	beq.n	8001570 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001556:	4bb0      	ldr	r3, [pc, #704]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b08      	cmp	r3, #8
 8001560:	d159      	bne.n	8001616 <HAL_RCC_OscConfig+0xf6>
 8001562:	4bad      	ldr	r3, [pc, #692]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156e:	d152      	bne.n	8001616 <HAL_RCC_OscConfig+0xf6>
 8001570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001574:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001584:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b01      	cmp	r3, #1
 800159a:	d102      	bne.n	80015a2 <HAL_RCC_OscConfig+0x82>
 800159c:	4b9e      	ldr	r3, [pc, #632]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	e015      	b.n	80015ce <HAL_RCC_OscConfig+0xae>
 80015a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015aa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015be:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80015ca:	4b93      	ldr	r3, [pc, #588]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015d2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80015d6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015da:	fa92 f2a2 	rbit	r2, r2
 80015de:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80015e2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80015e6:	fab2 f282 	clz	r2, r2
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	f042 0220 	orr.w	r2, r2, #32
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	f002 021f 	and.w	r2, r2, #31
 80015f6:	2101      	movs	r1, #1
 80015f8:	fa01 f202 	lsl.w	r2, r1, r2
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 810c 	beq.w	800181c <HAL_RCC_OscConfig+0x2fc>
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 8106 	bne.w	800181c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	f000 be86 	b.w	8002322 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001620:	d106      	bne.n	8001630 <HAL_RCC_OscConfig+0x110>
 8001622:	4b7d      	ldr	r3, [pc, #500]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a7c      	ldr	r2, [pc, #496]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e030      	b.n	8001692 <HAL_RCC_OscConfig+0x172>
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x134>
 800163a:	4b77      	ldr	r3, [pc, #476]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a76      	ldr	r2, [pc, #472]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 8001640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b74      	ldr	r3, [pc, #464]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a73      	ldr	r2, [pc, #460]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 800164c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e01e      	b.n	8001692 <HAL_RCC_OscConfig+0x172>
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165e:	d10c      	bne.n	800167a <HAL_RCC_OscConfig+0x15a>
 8001660:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a6c      	ldr	r2, [pc, #432]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 8001666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a69      	ldr	r2, [pc, #420]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 8001672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	e00b      	b.n	8001692 <HAL_RCC_OscConfig+0x172>
 800167a:	4b67      	ldr	r3, [pc, #412]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a66      	ldr	r2, [pc, #408]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 8001680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b64      	ldr	r3, [pc, #400]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a63      	ldr	r2, [pc, #396]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 800168c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001690:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001692:	4b61      	ldr	r3, [pc, #388]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	f023 020f 	bic.w	r2, r3, #15
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	495d      	ldr	r1, [pc, #372]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d059      	beq.n	8001764 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7fe fdec 	bl	800028c <HAL_GetTick>
 80016b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ba:	f7fe fde7 	bl	800028c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d902      	bls.n	80016d0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	f000 be29 	b.w	8002322 <HAL_RCC_OscConfig+0xe02>
 80016d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80016e4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0x1e2>
 80016fc:	4b46      	ldr	r3, [pc, #280]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x20e>
 8001702:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001706:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800171e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800172a:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001732:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001736:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800173a:	fa92 f2a2 	rbit	r2, r2
 800173e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001742:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001746:	fab2 f282 	clz	r2, r2
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f042 0220 	orr.w	r2, r2, #32
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	f002 021f 	and.w	r2, r2, #31
 8001756:	2101      	movs	r1, #1
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0ab      	beq.n	80016ba <HAL_RCC_OscConfig+0x19a>
 8001762:	e05c      	b.n	800181e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7fe fd92 	bl	800028c <HAL_GetTick>
 8001768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176e:	f7fe fd8d 	bl	800028c <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d902      	bls.n	8001784 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	f000 bdcf 	b.w	8002322 <HAL_RCC_OscConfig+0xe02>
 8001784:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001788:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001790:	fa93 f3a3 	rbit	r3, r3
 8001794:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001798:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d102      	bne.n	80017b6 <HAL_RCC_OscConfig+0x296>
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	e015      	b.n	80017e2 <HAL_RCC_OscConfig+0x2c2>
 80017b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_RCC_OscConfig+0x2f8>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017e6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80017ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80017ee:	fa92 f2a2 	rbit	r2, r2
 80017f2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80017f6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80017fa:	fab2 f282 	clz	r2, r2
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	f042 0220 	orr.w	r2, r2, #32
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	f002 021f 	and.w	r2, r2, #31
 800180a:	2101      	movs	r1, #1
 800180c:	fa01 f202 	lsl.w	r2, r1, r2
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1ab      	bne.n	800176e <HAL_RCC_OscConfig+0x24e>
 8001816:	e002      	b.n	800181e <HAL_RCC_OscConfig+0x2fe>
 8001818:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 816f 	beq.w	8001b0c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800182e:	4bd0      	ldr	r3, [pc, #832]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800183a:	4bcd      	ldr	r3, [pc, #820]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	d16c      	bne.n	8001920 <HAL_RCC_OscConfig+0x400>
 8001846:	4bca      	ldr	r3, [pc, #808]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d166      	bne.n	8001920 <HAL_RCC_OscConfig+0x400>
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001864:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b01      	cmp	r3, #1
 800187a:	d102      	bne.n	8001882 <HAL_RCC_OscConfig+0x362>
 800187c:	4bbc      	ldr	r3, [pc, #752]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e013      	b.n	80018aa <HAL_RCC_OscConfig+0x38a>
 8001882:	2302      	movs	r3, #2
 8001884:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001894:	2302      	movs	r3, #2
 8001896:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800189a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80018a6:	4bb2      	ldr	r3, [pc, #712]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	2202      	movs	r2, #2
 80018ac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80018b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018b4:	fa92 f2a2 	rbit	r2, r2
 80018b8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80018bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80018c0:	fab2 f282 	clz	r2, r2
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	f042 0220 	orr.w	r2, r2, #32
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	f002 021f 	and.w	r2, r2, #31
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <HAL_RCC_OscConfig+0x3cc>
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d002      	beq.n	80018ec <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	f000 bd1b 	b.w	8002322 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ec:	4ba0      	ldr	r3, [pc, #640]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	21f8      	movs	r1, #248	; 0xf8
 80018fc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001904:	fa91 f1a1 	rbit	r1, r1
 8001908:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800190c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001910:	fab1 f181 	clz	r1, r1
 8001914:	b2c9      	uxtb	r1, r1
 8001916:	408b      	lsls	r3, r1
 8001918:	4995      	ldr	r1, [pc, #596]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	e0f5      	b.n	8001b0c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8085 	beq.w	8001a36 <HAL_RCC_OscConfig+0x516>
 800192c:	2301      	movs	r3, #1
 800192e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800193e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800194c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	461a      	mov	r2, r3
 8001954:	2301      	movs	r3, #1
 8001956:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7fe fc98 	bl	800028c <HAL_GetTick>
 800195c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001962:	f7fe fc93 	bl	800028c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d902      	bls.n	8001978 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	f000 bcd5 	b.w	8002322 <HAL_RCC_OscConfig+0xe02>
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800198a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	095b      	lsrs	r3, r3, #5
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d102      	bne.n	80019a8 <HAL_RCC_OscConfig+0x488>
 80019a2:	4b73      	ldr	r3, [pc, #460]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	e013      	b.n	80019d0 <HAL_RCC_OscConfig+0x4b0>
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80019ba:	2302      	movs	r3, #2
 80019bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	2202      	movs	r2, #2
 80019d2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80019d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019da:	fa92 f2a2 	rbit	r2, r2
 80019de:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80019e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019e6:	fab2 f282 	clz	r2, r2
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	f042 0220 	orr.w	r2, r2, #32
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	f002 021f 	and.w	r2, r2, #31
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0af      	beq.n	8001962 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	21f8      	movs	r1, #248	; 0xf8
 8001a12:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a1a:	fa91 f1a1 	rbit	r1, r1
 8001a1e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001a22:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001a26:	fab1 f181 	clz	r1, r1
 8001a2a:	b2c9      	uxtb	r1, r1
 8001a2c:	408b      	lsls	r3, r1
 8001a2e:	4950      	ldr	r1, [pc, #320]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
 8001a34:	e06a      	b.n	8001b0c <HAL_RCC_OscConfig+0x5ec>
 8001a36:	2301      	movs	r3, #1
 8001a38:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2300      	movs	r3, #0
 8001a60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7fe fc13 	bl	800028c <HAL_GetTick>
 8001a66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a6c:	f7fe fc0e 	bl	800028c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d902      	bls.n	8001a82 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	f000 bc50 	b.w	8002322 <HAL_RCC_OscConfig+0xe02>
 8001a82:	2302      	movs	r3, #2
 8001a84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a8c:	fa93 f3a3 	rbit	r3, r3
 8001a90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x592>
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	e013      	b.n	8001ada <HAL_RCC_OscConfig+0x5ba>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001aca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCC_OscConfig+0x650>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	2202      	movs	r2, #2
 8001adc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001ae0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ae4:	fa92 f2a2 	rbit	r2, r2
 8001ae8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001aec:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001af0:	fab2 f282 	clz	r2, r2
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	f042 0220 	orr.w	r2, r2, #32
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f002 021f 	and.w	r2, r2, #31
 8001b00:	2101      	movs	r1, #1
 8001b02:	fa01 f202 	lsl.w	r2, r1, r2
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1af      	bne.n	8001a6c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 80da 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d069      	beq.n	8001bfa <HAL_RCC_OscConfig+0x6da>
 8001b26:	2301      	movs	r3, #1
 8001b28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_OscConfig+0x654>)
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b50:	f7fe fb9c 	bl	800028c <HAL_GetTick>
 8001b54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b58:	e00e      	b.n	8001b78 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b5a:	f7fe fb97 	bl	800028c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d906      	bls.n	8001b78 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e3d9      	b.n	8002322 <HAL_RCC_OscConfig+0xe02>
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	10908120 	.word	0x10908120
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b8a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b8e:	2202      	movs	r2, #2
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f2a3 	rbit	r2, r3
 8001b9c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	fa93 f2a3 	rbit	r2, r3
 8001bb4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001bb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	4ba5      	ldr	r3, [pc, #660]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bbe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	6019      	str	r1, [r3, #0]
 8001bc6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	fa93 f1a3 	rbit	r1, r3
 8001bd0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bd4:	6019      	str	r1, [r3, #0]
  return result;
 8001bd6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	2101      	movs	r1, #1
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0b0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x63a>
 8001bf8:	e06a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7b0>
 8001bfa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c10:	601a      	str	r2, [r3, #0]
  return result;
 8001c12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c16:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b8c      	ldr	r3, [pc, #560]	; (8001e54 <HAL_RCC_OscConfig+0x934>)
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	461a      	mov	r2, r3
 8001c28:	2300      	movs	r3, #0
 8001c2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2c:	f7fe fb2e 	bl	800028c <HAL_GetTick>
 8001c30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	e009      	b.n	8001c4a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c36:	f7fe fb29 	bl	800028c <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e36b      	b.n	8002322 <HAL_RCC_OscConfig+0xe02>
 8001c4a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c4e:	2202      	movs	r2, #2
 8001c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c66:	2202      	movs	r2, #2
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	fa93 f2a3 	rbit	r2, r3
 8001c74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c7e:	2202      	movs	r2, #2
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c92:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	6019      	str	r1, [r3, #0]
 8001c9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fa93 f1a3 	rbit	r1, r3
 8001ca8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cac:	6019      	str	r1, [r3, #0]
  return result;
 8001cae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1b2      	bne.n	8001c36 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8158 	beq.w	8001f90 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce6:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d112      	bne.n	8001d18 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b57      	ldr	r3, [pc, #348]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a56      	ldr	r2, [pc, #344]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	4b54      	ldr	r3, [pc, #336]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	4b4f      	ldr	r3, [pc, #316]	; (8001e58 <HAL_RCC_OscConfig+0x938>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d11a      	bne.n	8001d5a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d24:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_RCC_OscConfig+0x938>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a4b      	ldr	r2, [pc, #300]	; (8001e58 <HAL_RCC_OscConfig+0x938>)
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d30:	f7fe faac 	bl	800028c <HAL_GetTick>
 8001d34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	e009      	b.n	8001d4e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7fe faa7 	bl	800028c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e2e9      	b.n	8002322 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <HAL_RCC_OscConfig+0x938>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0ef      	beq.n	8001d3a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x852>
 8001d64:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4a39      	ldr	r2, [pc, #228]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6213      	str	r3, [r2, #32]
 8001d70:	e02f      	b.n	8001dd2 <HAL_RCC_OscConfig+0x8b2>
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10c      	bne.n	8001d96 <HAL_RCC_OscConfig+0x876>
 8001d7c:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a33      	ldr	r2, [pc, #204]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	6213      	str	r3, [r2, #32]
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a30      	ldr	r2, [pc, #192]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001d8e:	f023 0304 	bic.w	r3, r3, #4
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	e01d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x8b2>
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x89a>
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a2a      	ldr	r2, [pc, #168]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a27      	ldr	r2, [pc, #156]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x8b2>
 8001dba:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a21      	ldr	r2, [pc, #132]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d06b      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7fe fa56 	bl	800028c <HAL_GetTick>
 8001de0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	e00b      	b.n	8001dfe <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7fe fa51 	bl	800028c <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e291      	b.n	8002322 <HAL_RCC_OscConfig+0xe02>
 8001dfe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e02:	2202      	movs	r2, #2
 8001e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fa93 f2a3 	rbit	r2, r3
 8001e10:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e2c:	601a      	str	r2, [r3, #0]
  return result;
 8001e2e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001e32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f043 0302 	orr.w	r3, r3, #2
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d109      	bne.n	8001e5c <HAL_RCC_OscConfig+0x93c>
 8001e48:	4b01      	ldr	r3, [pc, #4]	; (8001e50 <HAL_RCC_OscConfig+0x930>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	e014      	b.n	8001e78 <HAL_RCC_OscConfig+0x958>
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	10908120 	.word	0x10908120
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e60:	2202      	movs	r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	4bbb      	ldr	r3, [pc, #748]	; (8002164 <HAL_RCC_OscConfig+0xc44>)
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	6011      	str	r1, [r2, #0]
 8001e80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	fa92 f1a2 	rbit	r1, r2
 8001e8a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001e8e:	6011      	str	r1, [r2, #0]
  return result;
 8001e90:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	fab2 f282 	clz	r2, r2
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f002 021f 	and.w	r2, r2, #31
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d099      	beq.n	8001de6 <HAL_RCC_OscConfig+0x8c6>
 8001eb2:	e063      	b.n	8001f7c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb4:	f7fe f9ea 	bl	800028c <HAL_GetTick>
 8001eb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ebc:	e00b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7fe f9e5 	bl	800028c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e225      	b.n	8002322 <HAL_RCC_OscConfig+0xe02>
 8001ed6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001eda:	2202      	movs	r2, #2
 8001edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	fa93 f2a3 	rbit	r2, r3
 8001ee8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f2a3 	rbit	r2, r3
 8001f00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f04:	601a      	str	r2, [r3, #0]
  return result;
 8001f06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f043 0302 	orr.w	r3, r3, #2
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_OscConfig+0xa06>
 8001f20:	4b90      	ldr	r3, [pc, #576]	; (8002164 <HAL_RCC_OscConfig+0xc44>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	e00d      	b.n	8001f42 <HAL_RCC_OscConfig+0xa22>
 8001f26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f2a3 	rbit	r2, r3
 8001f38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	4b89      	ldr	r3, [pc, #548]	; (8002164 <HAL_RCC_OscConfig+0xc44>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f46:	2102      	movs	r1, #2
 8001f48:	6011      	str	r1, [r2, #0]
 8001f4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	fa92 f1a2 	rbit	r1, r2
 8001f54:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f58:	6011      	str	r1, [r2, #0]
  return result;
 8001f5a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	fab2 f282 	clz	r2, r2
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	f002 021f 	and.w	r2, r2, #31
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f202 	lsl.w	r2, r1, r2
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1a0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f7c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f84:	4b77      	ldr	r3, [pc, #476]	; (8002164 <HAL_RCC_OscConfig+0xc44>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	4a76      	ldr	r2, [pc, #472]	; (8002164 <HAL_RCC_OscConfig+0xc44>)
 8001f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 81c2 	beq.w	8002320 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9c:	4b71      	ldr	r3, [pc, #452]	; (8002164 <HAL_RCC_OscConfig+0xc44>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	f000 819c 	beq.w	80022e2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	f040 8114 	bne.w	80021de <HAL_RCC_OscConfig+0xcbe>
 8001fb6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fce:	601a      	str	r2, [r3, #0]
  return result;
 8001fd0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fd4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fe0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2300      	movs	r3, #0
 8001fea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7fe f94e 	bl	800028c <HAL_GetTick>
 8001ff0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff4:	e009      	b.n	800200a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7fe f949 	bl	800028c <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e18b      	b.n	8002322 <HAL_RCC_OscConfig+0xe02>
 800200a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800200e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	fa93 f2a3 	rbit	r2, r3
 800201e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002022:	601a      	str	r2, [r3, #0]
  return result;
 8002024:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002028:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d102      	bne.n	8002044 <HAL_RCC_OscConfig+0xb24>
 800203e:	4b49      	ldr	r3, [pc, #292]	; (8002164 <HAL_RCC_OscConfig+0xc44>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	e01b      	b.n	800207c <HAL_RCC_OscConfig+0xb5c>
 8002044:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002048:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800204c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	fa93 f2a3 	rbit	r2, r3
 8002072:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <HAL_RCC_OscConfig+0xc44>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002080:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002084:	6011      	str	r1, [r2, #0]
 8002086:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	fa92 f1a2 	rbit	r1, r2
 8002090:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002094:	6011      	str	r1, [r2, #0]
  return result;
 8002096:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	fab2 f282 	clz	r2, r2
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f042 0220 	orr.w	r2, r2, #32
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f002 021f 	and.w	r2, r2, #31
 80020ac:	2101      	movs	r1, #1
 80020ae:	fa01 f202 	lsl.w	r2, r1, r2
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d19e      	bne.n	8001ff6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_RCC_OscConfig+0xc44>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	4925      	ldr	r1, [pc, #148]	; (8002164 <HAL_RCC_OscConfig+0xc44>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
 80020d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	fa93 f2a3 	rbit	r2, r3
 80020e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020ec:	601a      	str	r2, [r3, #0]
  return result;
 80020ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020f2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	461a      	mov	r2, r3
 8002106:	2301      	movs	r3, #1
 8002108:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe f8bf 	bl	800028c <HAL_GetTick>
 800210e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002112:	e009      	b.n	8002128 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002114:	f7fe f8ba 	bl	800028c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0fc      	b.n	8002322 <HAL_RCC_OscConfig+0xe02>
 8002128:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800212c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	fa93 f2a3 	rbit	r2, r3
 800213c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002140:	601a      	str	r2, [r3, #0]
  return result;
 8002142:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002146:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	fab3 f383 	clz	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	b2db      	uxtb	r3, r3
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <HAL_RCC_OscConfig+0xc48>
 800215c:	4b01      	ldr	r3, [pc, #4]	; (8002164 <HAL_RCC_OscConfig+0xc44>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	e01e      	b.n	80021a0 <HAL_RCC_OscConfig+0xc80>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800216c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	fa93 f2a3 	rbit	r2, r3
 800217c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002186:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f2a3 	rbit	r2, r3
 8002196:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_OscConfig+0xe0c>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021a8:	6011      	str	r1, [r2, #0]
 80021aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	fa92 f1a2 	rbit	r1, r2
 80021b4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021b8:	6011      	str	r1, [r2, #0]
  return result;
 80021ba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	fab2 f282 	clz	r2, r2
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	f042 0220 	orr.w	r2, r2, #32
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	f002 021f 	and.w	r2, r2, #31
 80021d0:	2101      	movs	r1, #1
 80021d2:	fa01 f202 	lsl.w	r2, r1, r2
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d09b      	beq.n	8002114 <HAL_RCC_OscConfig+0xbf4>
 80021dc:	e0a0      	b.n	8002320 <HAL_RCC_OscConfig+0xe00>
 80021de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f6:	601a      	str	r2, [r3, #0]
  return result;
 80021f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002208:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	461a      	mov	r2, r3
 8002210:	2300      	movs	r3, #0
 8002212:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7fe f83a 	bl	800028c <HAL_GetTick>
 8002218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221c:	e009      	b.n	8002232 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221e:	f7fe f835 	bl	800028c <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e077      	b.n	8002322 <HAL_RCC_OscConfig+0xe02>
 8002232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002236:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800223a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f2a3 	rbit	r2, r3
 8002246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224a:	601a      	str	r2, [r3, #0]
  return result;
 800224c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002250:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <HAL_RCC_OscConfig+0xd4c>
 8002266:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_RCC_OscConfig+0xe0c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	e01b      	b.n	80022a4 <HAL_RCC_OscConfig+0xd84>
 800226c:	f107 0320 	add.w	r3, r7, #32
 8002270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f107 0320 	add.w	r3, r7, #32
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f107 0318 	add.w	r3, r7, #24
 800228a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f107 0318 	add.w	r3, r7, #24
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	fa93 f2a3 	rbit	r2, r3
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_RCC_OscConfig+0xe0c>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	f107 0210 	add.w	r2, r7, #16
 80022a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022ac:	6011      	str	r1, [r2, #0]
 80022ae:	f107 0210 	add.w	r2, r7, #16
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	fa92 f1a2 	rbit	r1, r2
 80022b8:	f107 020c 	add.w	r2, r7, #12
 80022bc:	6011      	str	r1, [r2, #0]
  return result;
 80022be:	f107 020c 	add.w	r2, r7, #12
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f002 021f 	and.w	r2, r2, #31
 80022d4:	2101      	movs	r1, #1
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d19e      	bne.n	800221e <HAL_RCC_OscConfig+0xcfe>
 80022e0:	e01e      	b.n	8002320 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e018      	b.n	8002322 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_RCC_OscConfig+0xe0c>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80022fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	429a      	cmp	r2, r3
 8002308:	d108      	bne.n	800231c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800230a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800230e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b09e      	sub	sp, #120	; 0x78
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e162      	b.n	800260e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b90      	ldr	r3, [pc, #576]	; (800258c <HAL_RCC_ClockConfig+0x25c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d910      	bls.n	8002378 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b8d      	ldr	r3, [pc, #564]	; (800258c <HAL_RCC_ClockConfig+0x25c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 0207 	bic.w	r2, r3, #7
 800235e:	498b      	ldr	r1, [pc, #556]	; (800258c <HAL_RCC_ClockConfig+0x25c>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b89      	ldr	r3, [pc, #548]	; (800258c <HAL_RCC_ClockConfig+0x25c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e14a      	b.n	800260e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	4b82      	ldr	r3, [pc, #520]	; (8002590 <HAL_RCC_ClockConfig+0x260>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	497f      	ldr	r1, [pc, #508]	; (8002590 <HAL_RCC_ClockConfig+0x260>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 80dc 	beq.w	800255c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d13c      	bne.n	8002426 <HAL_RCC_ClockConfig+0xf6>
 80023ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d102      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xa6>
 80023d0:	4b6f      	ldr	r3, [pc, #444]	; (8002590 <HAL_RCC_ClockConfig+0x260>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	e00f      	b.n	80023f6 <HAL_RCC_ClockConfig+0xc6>
 80023d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	667b      	str	r3, [r7, #100]	; 0x64
 80023e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e8:	663b      	str	r3, [r7, #96]	; 0x60
 80023ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <HAL_RCC_ClockConfig+0x260>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80023fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023fe:	fa92 f2a2 	rbit	r2, r2
 8002402:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002404:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002406:	fab2 f282 	clz	r2, r2
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f042 0220 	orr.w	r2, r2, #32
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	f002 021f 	and.w	r2, r2, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f202 	lsl.w	r2, r1, r2
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d17b      	bne.n	800251a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0f3      	b.n	800260e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d13c      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x178>
 800242e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002432:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800243c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d102      	bne.n	8002458 <HAL_RCC_ClockConfig+0x128>
 8002452:	4b4f      	ldr	r3, [pc, #316]	; (8002590 <HAL_RCC_ClockConfig+0x260>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	e00f      	b.n	8002478 <HAL_RCC_ClockConfig+0x148>
 8002458:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800245c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	647b      	str	r3, [r7, #68]	; 0x44
 8002466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800246a:	643b      	str	r3, [r7, #64]	; 0x40
 800246c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002474:	4b46      	ldr	r3, [pc, #280]	; (8002590 <HAL_RCC_ClockConfig+0x260>)
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800247c:	63ba      	str	r2, [r7, #56]	; 0x38
 800247e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002480:	fa92 f2a2 	rbit	r2, r2
 8002484:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002488:	fab2 f282 	clz	r2, r2
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f042 0220 	orr.w	r2, r2, #32
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	f002 021f 	and.w	r2, r2, #31
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f202 	lsl.w	r2, r1, r2
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d13a      	bne.n	800251a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0b2      	b.n	800260e <HAL_RCC_ClockConfig+0x2de>
 80024a8:	2302      	movs	r3, #2
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d102      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x1a0>
 80024ca:	4b31      	ldr	r3, [pc, #196]	; (8002590 <HAL_RCC_ClockConfig+0x260>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	e00d      	b.n	80024ec <HAL_RCC_ClockConfig+0x1bc>
 80024d0:	2302      	movs	r3, #2
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
 80024dc:	2302      	movs	r3, #2
 80024de:	623b      	str	r3, [r7, #32]
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	4b29      	ldr	r3, [pc, #164]	; (8002590 <HAL_RCC_ClockConfig+0x260>)
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	2202      	movs	r2, #2
 80024ee:	61ba      	str	r2, [r7, #24]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	fa92 f2a2 	rbit	r2, r2
 80024f6:	617a      	str	r2, [r7, #20]
  return result;
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	fab2 f282 	clz	r2, r2
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	f042 0220 	orr.w	r2, r2, #32
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	f002 021f 	and.w	r2, r2, #31
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f202 	lsl.w	r2, r1, r2
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e079      	b.n	800260e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_RCC_ClockConfig+0x260>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f023 0203 	bic.w	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	491a      	ldr	r1, [pc, #104]	; (8002590 <HAL_RCC_ClockConfig+0x260>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800252c:	f7fd feae 	bl	800028c <HAL_GetTick>
 8002530:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	e00a      	b.n	800254a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002534:	f7fd feaa 	bl	800028c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e061      	b.n	800260e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_RCC_ClockConfig+0x260>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 020c 	and.w	r2, r3, #12
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	429a      	cmp	r2, r3
 800255a:	d1eb      	bne.n	8002534 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_ClockConfig+0x25c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d214      	bcs.n	8002594 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_RCC_ClockConfig+0x25c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 0207 	bic.w	r2, r3, #7
 8002572:	4906      	ldr	r1, [pc, #24]	; (800258c <HAL_RCC_ClockConfig+0x25c>)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <HAL_RCC_ClockConfig+0x25c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e040      	b.n	800260e <HAL_RCC_ClockConfig+0x2de>
 800258c:	40022000 	.word	0x40022000
 8002590:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_ClockConfig+0x2e8>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	491a      	ldr	r1, [pc, #104]	; (8002618 <HAL_RCC_ClockConfig+0x2e8>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025be:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_RCC_ClockConfig+0x2e8>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4912      	ldr	r1, [pc, #72]	; (8002618 <HAL_RCC_ClockConfig+0x2e8>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025d2:	f000 f829 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80025d6:	4601      	mov	r1, r0
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_RCC_ClockConfig+0x2e8>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e0:	22f0      	movs	r2, #240	; 0xf0
 80025e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	fa92 f2a2 	rbit	r2, r2
 80025ea:	60fa      	str	r2, [r7, #12]
  return result;
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	fab2 f282 	clz	r2, r2
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	40d3      	lsrs	r3, r2
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x2ec>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	fa21 f303 	lsr.w	r3, r1, r3
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <HAL_RCC_ClockConfig+0x2f0>)
 8002600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_RCC_ClockConfig+0x2f4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd fdfc 	bl	8000204 <HAL_InitTick>
  
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3778      	adds	r7, #120	; 0x78
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	08006a58 	.word	0x08006a58
 8002620:	20000118 	.word	0x20000118
 8002624:	20000000 	.word	0x20000000

08002628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b08b      	sub	sp, #44	; 0x2c
 800262c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002642:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b04      	cmp	r3, #4
 8002650:	d002      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x30>
 8002652:	2b08      	cmp	r3, #8
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x36>
 8002656:	e03c      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800265a:	623b      	str	r3, [r7, #32]
      break;
 800265c:	e03c      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002664:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002668:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	fa92 f2a2 	rbit	r2, r2
 8002670:	607a      	str	r2, [r7, #4]
  return result;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	fab2 f282 	clz	r2, r2
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	40d3      	lsrs	r3, r2
 800267c:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800267e:	5cd3      	ldrb	r3, [r2, r3]
 8002680:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	220f      	movs	r2, #15
 800268c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	fa92 f2a2 	rbit	r2, r2
 8002694:	60fa      	str	r2, [r7, #12]
  return result;
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	fab2 f282 	clz	r2, r2
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	40d3      	lsrs	r3, r2
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026b0:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
 80026c0:	e004      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	623b      	str	r3, [r7, #32]
      break;
 80026d0:	e002      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80026d4:	623b      	str	r3, [r7, #32]
      break;
 80026d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d8:	6a3b      	ldr	r3, [r7, #32]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	372c      	adds	r7, #44	; 0x2c
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	007a1200 	.word	0x007a1200
 80026f0:	08006a38 	.word	0x08006a38
 80026f4:	08006a48 	.word	0x08006a48
 80026f8:	003d0900 	.word	0x003d0900

080026fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_RCC_GetHCLKFreq+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000118 	.word	0x20000118

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800271a:	f7ff ffef 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 800271e:	4601      	mov	r1, r0
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002728:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800272c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	fa92 f2a2 	rbit	r2, r2
 8002734:	603a      	str	r2, [r7, #0]
  return result;
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	fab2 f282 	clz	r2, r2
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	40d3      	lsrs	r3, r2
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000
 8002754:	08006a68 	.word	0x08006a68

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800275e:	f7ff ffcd 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 8002762:	4601      	mov	r1, r0
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800276c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002770:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	fa92 f2a2 	rbit	r2, r2
 8002778:	603a      	str	r2, [r7, #0]
  return result;
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	40d3      	lsrs	r3, r2
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002786:	5cd3      	ldrb	r3, [r2, r3]
 8002788:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000
 8002798:	08006a68 	.word	0x08006a68

0800279c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b092      	sub	sp, #72	; 0x48
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80d7 	beq.w	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c0:	4b4e      	ldr	r3, [pc, #312]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10e      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	4a4a      	ldr	r2, [pc, #296]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d6:	61d3      	str	r3, [r2, #28]
 80027d8:	4b48      	ldr	r3, [pc, #288]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	4b45      	ldr	r3, [pc, #276]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f6:	4b42      	ldr	r3, [pc, #264]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a41      	ldr	r2, [pc, #260]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002800:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7fd fd43 	bl	800028c <HAL_GetTick>
 8002806:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	e008      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7fd fd3f 	bl	800028c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b64      	cmp	r3, #100	; 0x64
 8002816:	d901      	bls.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e14b      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002828:	4b34      	ldr	r3, [pc, #208]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002830:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8084 	beq.w	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002842:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002844:	429a      	cmp	r2, r3
 8002846:	d07c      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002848:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	4b26      	ldr	r3, [pc, #152]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	461a      	mov	r2, r3
 8002872:	2301      	movs	r3, #1
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	461a      	mov	r2, r3
 8002896:	2300      	movs	r3, #0
 8002898:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d04b      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7fd fcef 	bl	800028c <HAL_GetTick>
 80028ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fd fceb 	bl	800028c <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0f5      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80028c8:	2302      	movs	r3, #2
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	2302      	movs	r3, #2
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	61fb      	str	r3, [r7, #28]
  return result;
 80028e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d108      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80028f6:	4b01      	ldr	r3, [pc, #4]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	e00d      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80028fc:	40021000 	.word	0x40021000
 8002900:	40007000 	.word	0x40007000
 8002904:	10908100 	.word	0x10908100
 8002908:	2302      	movs	r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	4b69      	ldr	r3, [pc, #420]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	2202      	movs	r2, #2
 800291a:	613a      	str	r2, [r7, #16]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	fa92 f2a2 	rbit	r2, r2
 8002922:	60fa      	str	r2, [r7, #12]
  return result;
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	fab2 f282 	clz	r2, r2
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f002 021f 	and.w	r2, r2, #31
 8002936:	2101      	movs	r1, #1
 8002938:	fa01 f202 	lsl.w	r2, r1, r2
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0b7      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002942:	4b5e      	ldr	r3, [pc, #376]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	495b      	ldr	r1, [pc, #364]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002950:	4313      	orrs	r3, r2
 8002952:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002954:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b57      	ldr	r3, [pc, #348]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	4a56      	ldr	r2, [pc, #344]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002966:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002974:	4b51      	ldr	r3, [pc, #324]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f023 0203 	bic.w	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	494e      	ldr	r1, [pc, #312]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002982:	4313      	orrs	r3, r2
 8002984:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002992:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f023 0210 	bic.w	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	4947      	ldr	r1, [pc, #284]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029b0:	4b42      	ldr	r3, [pc, #264]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	493f      	ldr	r1, [pc, #252]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029ce:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f023 0220 	bic.w	r2, r3, #32
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	4938      	ldr	r1, [pc, #224]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ec:	4b33      	ldr	r3, [pc, #204]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	4930      	ldr	r1, [pc, #192]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	4929      	ldr	r1, [pc, #164]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002a28:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	4921      	ldr	r1, [pc, #132]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a46:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	491a      	ldr	r1, [pc, #104]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a64:	4b15      	ldr	r3, [pc, #84]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	4912      	ldr	r1, [pc, #72]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	490b      	ldr	r1, [pc, #44]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	4903      	ldr	r1, [pc, #12]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3748      	adds	r7, #72	; 0x48
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e040      	b.n	8002b54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f003 f9b4 	bl	8005e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0201 	bic.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8c0 	bl	8002c84 <UART_SetConfig>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e022      	b.n	8002b54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fa36 	bl	8002f88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fabd 	bl	80030cc <UART_CheckIdleState>
 8002b52:	4603      	mov	r3, r0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	f040 8081 	bne.w	8002c78 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_UART_Transmit+0x26>
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e079      	b.n	8002c7a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_UART_Transmit+0x38>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e072      	b.n	8002c7a <HAL_UART_Transmit+0x11e>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2221      	movs	r2, #33	; 0x21
 8002ba6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002ba8:	f7fd fb70 	bl	800028c <HAL_GetTick>
 8002bac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	88fa      	ldrh	r2, [r7, #6]
 8002bb2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc6:	d108      	bne.n	8002bda <HAL_UART_Transmit+0x7e>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d104      	bne.n	8002bda <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	e003      	b.n	8002be2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002be2:	e02d      	b.n	8002c40 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2200      	movs	r2, #0
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fab1 	bl	8003156 <UART_WaitOnFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e03d      	b.n	8002c7a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10b      	bne.n	8002c1c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	881a      	ldrh	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c10:	b292      	uxth	r2, r2
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	3302      	adds	r3, #2
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e008      	b.n	8002c2e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	781a      	ldrb	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b292      	uxth	r2, r2
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1cb      	bne.n	8002be4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2200      	movs	r2, #0
 8002c54:	2140      	movs	r1, #64	; 0x40
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fa7d 	bl	8003156 <UART_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e009      	b.n	8002c7a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e000      	b.n	8002c7a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002c78:	2302      	movs	r3, #2
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4ba2      	ldr	r3, [pc, #648]	; (8002f3c <UART_SetConfig+0x2b8>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	6939      	ldr	r1, [r7, #16]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a90      	ldr	r2, [pc, #576]	; (8002f40 <UART_SetConfig+0x2bc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d121      	bne.n	8002d48 <UART_SetConfig+0xc4>
 8002d04:	4b8f      	ldr	r3, [pc, #572]	; (8002f44 <UART_SetConfig+0x2c0>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d817      	bhi.n	8002d40 <UART_SetConfig+0xbc>
 8002d10:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <UART_SetConfig+0x94>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d35 	.word	0x08002d35
 8002d20:	08002d3b 	.word	0x08002d3b
 8002d24:	08002d2f 	.word	0x08002d2f
 8002d28:	2300      	movs	r3, #0
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	e01e      	b.n	8002d6c <UART_SetConfig+0xe8>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	77fb      	strb	r3, [r7, #31]
 8002d32:	e01b      	b.n	8002d6c <UART_SetConfig+0xe8>
 8002d34:	2304      	movs	r3, #4
 8002d36:	77fb      	strb	r3, [r7, #31]
 8002d38:	e018      	b.n	8002d6c <UART_SetConfig+0xe8>
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	77fb      	strb	r3, [r7, #31]
 8002d3e:	e015      	b.n	8002d6c <UART_SetConfig+0xe8>
 8002d40:	2310      	movs	r3, #16
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	bf00      	nop
 8002d46:	e011      	b.n	8002d6c <UART_SetConfig+0xe8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a7e      	ldr	r2, [pc, #504]	; (8002f48 <UART_SetConfig+0x2c4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d102      	bne.n	8002d58 <UART_SetConfig+0xd4>
 8002d52:	2300      	movs	r3, #0
 8002d54:	77fb      	strb	r3, [r7, #31]
 8002d56:	e009      	b.n	8002d6c <UART_SetConfig+0xe8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a7b      	ldr	r2, [pc, #492]	; (8002f4c <UART_SetConfig+0x2c8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d102      	bne.n	8002d68 <UART_SetConfig+0xe4>
 8002d62:	2300      	movs	r3, #0
 8002d64:	77fb      	strb	r3, [r7, #31]
 8002d66:	e001      	b.n	8002d6c <UART_SetConfig+0xe8>
 8002d68:	2310      	movs	r3, #16
 8002d6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d74:	f040 8082 	bne.w	8002e7c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002d78:	7ffb      	ldrb	r3, [r7, #31]
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d85e      	bhi.n	8002e3c <UART_SetConfig+0x1b8>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <UART_SetConfig+0x100>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002da9 	.word	0x08002da9
 8002d88:	08002dc9 	.word	0x08002dc9
 8002d8c:	08002de9 	.word	0x08002de9
 8002d90:	08002e3d 	.word	0x08002e3d
 8002d94:	08002e05 	.word	0x08002e05
 8002d98:	08002e3d 	.word	0x08002e3d
 8002d9c:	08002e3d 	.word	0x08002e3d
 8002da0:	08002e3d 	.word	0x08002e3d
 8002da4:	08002e25 	.word	0x08002e25
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da8:	f7ff fcb4 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8002dac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	005a      	lsls	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	085b      	lsrs	r3, r3, #1
 8002db8:	441a      	add	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	61bb      	str	r3, [r7, #24]
        break;
 8002dc6:	e03c      	b.n	8002e42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dc8:	f7ff fcc6 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8002dcc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	005a      	lsls	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	085b      	lsrs	r3, r3, #1
 8002dd8:	441a      	add	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	61bb      	str	r3, [r7, #24]
        break;
 8002de6:	e02c      	b.n	8002e42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002df2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6852      	ldr	r2, [r2, #4]
 8002dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	61bb      	str	r3, [r7, #24]
        break;
 8002e02:	e01e      	b.n	8002e42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e04:	f7ff fc10 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 8002e08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	005a      	lsls	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	441a      	add	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	61bb      	str	r3, [r7, #24]
        break;
 8002e22:	e00e      	b.n	8002e42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	61bb      	str	r3, [r7, #24]
        break;
 8002e3a:	e002      	b.n	8002e42 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	75fb      	strb	r3, [r7, #23]
        break;
 8002e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b0f      	cmp	r3, #15
 8002e46:	d916      	bls.n	8002e76 <UART_SetConfig+0x1f2>
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4e:	d212      	bcs.n	8002e76 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f023 030f 	bic.w	r3, r3, #15
 8002e58:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	897b      	ldrh	r3, [r7, #10]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	897a      	ldrh	r2, [r7, #10]
 8002e72:	60da      	str	r2, [r3, #12]
 8002e74:	e07d      	b.n	8002f72 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
 8002e7a:	e07a      	b.n	8002f72 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8002e7c:	7ffb      	ldrb	r3, [r7, #31]
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d866      	bhi.n	8002f50 <UART_SetConfig+0x2cc>
 8002e82:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <UART_SetConfig+0x204>)
 8002e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e88:	08002ead 	.word	0x08002ead
 8002e8c:	08002ecb 	.word	0x08002ecb
 8002e90:	08002ee9 	.word	0x08002ee9
 8002e94:	08002f51 	.word	0x08002f51
 8002e98:	08002f05 	.word	0x08002f05
 8002e9c:	08002f51 	.word	0x08002f51
 8002ea0:	08002f51 	.word	0x08002f51
 8002ea4:	08002f51 	.word	0x08002f51
 8002ea8:	08002f23 	.word	0x08002f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eac:	f7ff fc32 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8002eb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	085a      	lsrs	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	441a      	add	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	61bb      	str	r3, [r7, #24]
        break;
 8002ec8:	e045      	b.n	8002f56 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eca:	f7ff fc45 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8002ece:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	085a      	lsrs	r2, r3, #1
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	441a      	add	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	61bb      	str	r3, [r7, #24]
        break;
 8002ee6:	e036      	b.n	8002f56 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002ef2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6852      	ldr	r2, [r2, #4]
 8002efa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	61bb      	str	r3, [r7, #24]
        break;
 8002f02:	e028      	b.n	8002f56 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f04:	f7ff fb90 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 8002f08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	085a      	lsrs	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	441a      	add	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	61bb      	str	r3, [r7, #24]
        break;
 8002f20:	e019      	b.n	8002f56 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	085b      	lsrs	r3, r3, #1
 8002f28:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	61bb      	str	r3, [r7, #24]
        break;
 8002f38:	e00d      	b.n	8002f56 <UART_SetConfig+0x2d2>
 8002f3a:	bf00      	nop
 8002f3c:	efff69f3 	.word	0xefff69f3
 8002f40:	40013800 	.word	0x40013800
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40004400 	.word	0x40004400
 8002f4c:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	75fb      	strb	r3, [r7, #23]
        break;
 8002f54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d908      	bls.n	8002f6e <UART_SetConfig+0x2ea>
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d204      	bcs.n	8002f6e <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	60da      	str	r2, [r3, #12]
 8002f6c:	e001      	b.n	8002f72 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01a      	beq.n	800309e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003086:	d10a      	bne.n	800309e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	605a      	str	r2, [r3, #4]
  }
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80030da:	f7fd f8d7 	bl	800028c <HAL_GetTick>
 80030de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d10e      	bne.n	800310c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f82a 	bl	8003156 <UART_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e020      	b.n	800314e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b04      	cmp	r3, #4
 8003118:	d10e      	bne.n	8003138 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800311a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f814 	bl	8003156 <UART_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e00a      	b.n	800314e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003166:	e05d      	b.n	8003224 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800316e:	d059      	beq.n	8003224 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003170:	f7fd f88c 	bl	800028c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	429a      	cmp	r2, r3
 800317e:	d302      	bcc.n	8003186 <UART_WaitOnFlagUntilTimeout+0x30>
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d11b      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003194:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e042      	b.n	8003244 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02b      	beq.n	8003224 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031da:	d123      	bne.n	8003224 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e00f      	b.n	8003244 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	429a      	cmp	r2, r3
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	429a      	cmp	r2, r3
 8003240:	d092      	beq.n	8003168 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003254:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003258:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003260:	b29a      	uxth	r2, r3
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	4313      	orrs	r3, r2
 8003266:	b29a      	uxth	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003284:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003288:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003290:	b29b      	uxth	r3, r3
 8003292:	b21a      	sxth	r2, r3
 8003294:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003298:	43db      	mvns	r3, r3
 800329a:	b21b      	sxth	r3, r3
 800329c:	4013      	ands	r3, r2
 800329e:	b21b      	sxth	r3, r3
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032b6:	b084      	sub	sp, #16
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	f107 0014 	add.w	r0, r7, #20
 80032c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ffaf 	bl	800324c <USB_EnableGlobalInt>

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032fa:	b004      	add	sp, #16
 80032fc:	4770      	bx	lr
	...

08003300 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003300:	b490      	push	{r4, r7}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003324:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	78db      	ldrb	r3, [r3, #3]
 800332a:	2b03      	cmp	r3, #3
 800332c:	d819      	bhi.n	8003362 <USB_ActivateEndpoint+0x62>
 800332e:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <USB_ActivateEndpoint+0x34>)
 8003330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003334:	08003345 	.word	0x08003345
 8003338:	08003359 	.word	0x08003359
 800333c:	08003369 	.word	0x08003369
 8003340:	0800334f 	.word	0x0800334f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003344:	8abb      	ldrh	r3, [r7, #20]
 8003346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800334a:	82bb      	strh	r3, [r7, #20]
      break;
 800334c:	e00d      	b.n	800336a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800334e:	8abb      	ldrh	r3, [r7, #20]
 8003350:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003354:	82bb      	strh	r3, [r7, #20]
      break;
 8003356:	e008      	b.n	800336a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003358:	8abb      	ldrh	r3, [r7, #20]
 800335a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800335e:	82bb      	strh	r3, [r7, #20]
      break;
 8003360:	e003      	b.n	800336a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
      break;
 8003366:	e000      	b.n	800336a <USB_ActivateEndpoint+0x6a>
      break;
 8003368:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	441a      	add	r2, r3
 8003374:	8abb      	ldrh	r3, [r7, #20]
 8003376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800337a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800337e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003386:	b29b      	uxth	r3, r3
 8003388:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	b21b      	sxth	r3, r3
 800339a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	b21a      	sxth	r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b21b      	sxth	r3, r3
 80033aa:	4313      	orrs	r3, r2
 80033ac:	b21b      	sxth	r3, r3
 80033ae:	b29c      	uxth	r4, r3
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	441a      	add	r2, r3
 80033ba:	4b8c      	ldr	r3, [pc, #560]	; (80035ec <USB_ActivateEndpoint+0x2ec>)
 80033bc:	4323      	orrs	r3, r4
 80033be:	b29b      	uxth	r3, r3
 80033c0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	7b1b      	ldrb	r3, [r3, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 8116 	bne.w	80035f8 <USB_ActivateEndpoint+0x2f8>
  {
    if (ep->is_in != 0U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d067      	beq.n	80034a4 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80033d4:	687c      	ldr	r4, [r7, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033dc:	b29b      	uxth	r3, r3
 80033de:	441c      	add	r4, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4423      	add	r3, r4
 80033e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ec:	461c      	mov	r4, r3
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	88db      	ldrh	r3, [r3, #6]
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29c      	uxth	r4, r3
 800340a:	4623      	mov	r3, r4
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d014      	beq.n	800343e <USB_ActivateEndpoint+0x13e>
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342a:	b29c      	uxth	r4, r3
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	441a      	add	r2, r3
 8003436:	4b6e      	ldr	r3, [pc, #440]	; (80035f0 <USB_ActivateEndpoint+0x2f0>)
 8003438:	4323      	orrs	r3, r4
 800343a:	b29b      	uxth	r3, r3
 800343c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	78db      	ldrb	r3, [r3, #3]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d018      	beq.n	8003478 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800345c:	b29c      	uxth	r4, r3
 800345e:	f084 0320 	eor.w	r3, r4, #32
 8003462:	b29c      	uxth	r4, r3
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	441a      	add	r2, r3
 800346e:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <USB_ActivateEndpoint+0x2ec>)
 8003470:	4323      	orrs	r3, r4
 8003472:	b29b      	uxth	r3, r3
 8003474:	8013      	strh	r3, [r2, #0]
 8003476:	e22f      	b.n	80038d8 <USB_ActivateEndpoint+0x5d8>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	b29b      	uxth	r3, r3
 8003486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800348e:	b29c      	uxth	r4, r3
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	4b54      	ldr	r3, [pc, #336]	; (80035ec <USB_ActivateEndpoint+0x2ec>)
 800349c:	4323      	orrs	r3, r4
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
 80034a2:	e219      	b.n	80038d8 <USB_ActivateEndpoint+0x5d8>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80034a4:	687c      	ldr	r4, [r7, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	441c      	add	r4, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4423      	add	r3, r4
 80034b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034bc:	461c      	mov	r4, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	88db      	ldrh	r3, [r3, #6]
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80034cc:	687c      	ldr	r4, [r7, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	441c      	add	r4, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4423      	add	r3, r4
 80034e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d110      	bne.n	8003510 <USB_ActivateEndpoint+0x210>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	801a      	strh	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	801a      	strh	r2, [r3, #0]
 800350e:	e02f      	b.n	8003570 <USB_ActivateEndpoint+0x270>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b3e      	cmp	r3, #62	; 0x3e
 8003516:	d813      	bhi.n	8003540 <USB_ActivateEndpoint+0x240>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <USB_ActivateEndpoint+0x232>
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	3301      	adds	r3, #1
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	b29b      	uxth	r3, r3
 8003536:	029b      	lsls	r3, r3, #10
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	801a      	strh	r2, [r3, #0]
 800353e:	e017      	b.n	8003570 <USB_ActivateEndpoint+0x270>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <USB_ActivateEndpoint+0x25a>
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	3b01      	subs	r3, #1
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	b29b      	uxth	r3, r3
 800355e:	029b      	lsls	r3, r3, #10
 8003560:	b29b      	uxth	r3, r3
 8003562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29c      	uxth	r4, r3
 800357e:	4623      	mov	r3, r4
 8003580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d014      	beq.n	80035b2 <USB_ActivateEndpoint+0x2b2>
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	b29c      	uxth	r4, r3
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	441a      	add	r2, r3
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <USB_ActivateEndpoint+0x2f4>)
 80035ac:	4323      	orrs	r3, r4
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c8:	b29c      	uxth	r4, r3
 80035ca:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80035ce:	b29c      	uxth	r4, r3
 80035d0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80035d4:	b29c      	uxth	r4, r3
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	441a      	add	r2, r3
 80035e0:	4b02      	ldr	r3, [pc, #8]	; (80035ec <USB_ActivateEndpoint+0x2ec>)
 80035e2:	4323      	orrs	r3, r4
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	8013      	strh	r3, [r2, #0]
 80035e8:	e176      	b.n	80038d8 <USB_ActivateEndpoint+0x5d8>
 80035ea:	bf00      	nop
 80035ec:	ffff8080 	.word	0xffff8080
 80035f0:	ffff80c0 	.word	0xffff80c0
 80035f4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	b29c      	uxth	r4, r3
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	441a      	add	r2, r3
 800361a:	4b96      	ldr	r3, [pc, #600]	; (8003874 <USB_ActivateEndpoint+0x574>)
 800361c:	4323      	orrs	r3, r4
 800361e:	b29b      	uxth	r3, r3
 8003620:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003622:	687c      	ldr	r4, [r7, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800362a:	b29b      	uxth	r3, r3
 800362c:	441c      	add	r4, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4423      	add	r3, r4
 8003636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800363a:	461c      	mov	r4, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	891b      	ldrh	r3, [r3, #8]
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	b29b      	uxth	r3, r3
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	b29b      	uxth	r3, r3
 8003648:	8023      	strh	r3, [r4, #0]
 800364a:	687c      	ldr	r4, [r7, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003652:	b29b      	uxth	r3, r3
 8003654:	441c      	add	r4, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4423      	add	r3, r4
 800365e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003662:	461c      	mov	r4, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	895b      	ldrh	r3, [r3, #10]
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	b29b      	uxth	r3, r3
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	b29b      	uxth	r3, r3
 8003670:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	785b      	ldrb	r3, [r3, #1]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 8088 	bne.w	800378c <USB_ActivateEndpoint+0x48c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29c      	uxth	r4, r3
 800368a:	4623      	mov	r3, r4
 800368c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d014      	beq.n	80036be <USB_ActivateEndpoint+0x3be>
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	b29c      	uxth	r4, r3
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	441a      	add	r2, r3
 80036b6:	4b70      	ldr	r3, [pc, #448]	; (8003878 <USB_ActivateEndpoint+0x578>)
 80036b8:	4323      	orrs	r3, r4
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29c      	uxth	r4, r3
 80036cc:	4623      	mov	r3, r4
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d014      	beq.n	8003700 <USB_ActivateEndpoint+0x400>
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ec:	b29c      	uxth	r4, r3
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	441a      	add	r2, r3
 80036f8:	4b60      	ldr	r3, [pc, #384]	; (800387c <USB_ActivateEndpoint+0x57c>)
 80036fa:	4323      	orrs	r3, r4
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003716:	b29c      	uxth	r4, r3
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	441a      	add	r2, r3
 8003722:	4b56      	ldr	r3, [pc, #344]	; (800387c <USB_ActivateEndpoint+0x57c>)
 8003724:	4323      	orrs	r3, r4
 8003726:	b29b      	uxth	r3, r3
 8003728:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800373c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003740:	b29c      	uxth	r4, r3
 8003742:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003746:	b29c      	uxth	r4, r3
 8003748:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800374c:	b29c      	uxth	r4, r3
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	441a      	add	r2, r3
 8003758:	4b49      	ldr	r3, [pc, #292]	; (8003880 <USB_ActivateEndpoint+0x580>)
 800375a:	4323      	orrs	r3, r4
 800375c:	b29b      	uxth	r3, r3
 800375e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003776:	b29c      	uxth	r4, r3
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	441a      	add	r2, r3
 8003782:	4b3f      	ldr	r3, [pc, #252]	; (8003880 <USB_ActivateEndpoint+0x580>)
 8003784:	4323      	orrs	r3, r4
 8003786:	b29b      	uxth	r3, r3
 8003788:	8013      	strh	r3, [r2, #0]
 800378a:	e0a5      	b.n	80038d8 <USB_ActivateEndpoint+0x5d8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	b29c      	uxth	r4, r3
 800379a:	4623      	mov	r3, r4
 800379c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d014      	beq.n	80037ce <USB_ActivateEndpoint+0x4ce>
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	b29c      	uxth	r4, r3
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <USB_ActivateEndpoint+0x578>)
 80037c8:	4323      	orrs	r3, r4
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	b29c      	uxth	r4, r3
 80037dc:	4623      	mov	r3, r4
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d014      	beq.n	8003810 <USB_ActivateEndpoint+0x510>
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fc:	b29c      	uxth	r4, r3
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	441a      	add	r2, r3
 8003808:	4b1c      	ldr	r3, [pc, #112]	; (800387c <USB_ActivateEndpoint+0x57c>)
 800380a:	4323      	orrs	r3, r4
 800380c:	b29b      	uxth	r3, r3
 800380e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	b29c      	uxth	r4, r3
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <USB_ActivateEndpoint+0x578>)
 8003834:	4323      	orrs	r3, r4
 8003836:	b29b      	uxth	r3, r3
 8003838:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	78db      	ldrb	r3, [r3, #3]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d020      	beq.n	8003884 <USB_ActivateEndpoint+0x584>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003858:	b29c      	uxth	r4, r3
 800385a:	f084 0320 	eor.w	r3, r4, #32
 800385e:	b29c      	uxth	r4, r3
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	441a      	add	r2, r3
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <USB_ActivateEndpoint+0x580>)
 800386c:	4323      	orrs	r3, r4
 800386e:	b29b      	uxth	r3, r3
 8003870:	8013      	strh	r3, [r2, #0]
 8003872:	e01c      	b.n	80038ae <USB_ActivateEndpoint+0x5ae>
 8003874:	ffff8180 	.word	0xffff8180
 8003878:	ffffc080 	.word	0xffffc080
 800387c:	ffff80c0 	.word	0xffff80c0
 8003880:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389a:	b29c      	uxth	r4, r3
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	441a      	add	r2, r3
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <USB_ActivateEndpoint+0x5e4>)
 80038a8:	4323      	orrs	r3, r4
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c4:	b29c      	uxth	r4, r3
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	441a      	add	r2, r3
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <USB_ActivateEndpoint+0x5e4>)
 80038d2:	4323      	orrs	r3, r4
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc90      	pop	{r4, r7}
 80038e2:	4770      	bx	lr
 80038e4:	ffff8080 	.word	0xffff8080

080038e8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038e8:	b490      	push	{r4, r7}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	7b1b      	ldrb	r3, [r3, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d171      	bne.n	80039de <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	785b      	ldrb	r3, [r3, #1]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d036      	beq.n	8003970 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	b29c      	uxth	r4, r3
 8003910:	4623      	mov	r3, r4
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d014      	beq.n	8003944 <USB_DeactivateEndpoint+0x5c>
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003930:	b29c      	uxth	r4, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	441a      	add	r2, r3
 800393c:	4b6b      	ldr	r3, [pc, #428]	; (8003aec <USB_DeactivateEndpoint+0x204>)
 800393e:	4323      	orrs	r3, r4
 8003940:	b29b      	uxth	r3, r3
 8003942:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	b29b      	uxth	r3, r3
 8003952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800395a:	b29c      	uxth	r4, r3
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	441a      	add	r2, r3
 8003966:	4b62      	ldr	r3, [pc, #392]	; (8003af0 <USB_DeactivateEndpoint+0x208>)
 8003968:	4323      	orrs	r3, r4
 800396a:	b29b      	uxth	r3, r3
 800396c:	8013      	strh	r3, [r2, #0]
 800396e:	e144      	b.n	8003bfa <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29c      	uxth	r4, r3
 800397e:	4623      	mov	r3, r4
 8003980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d014      	beq.n	80039b2 <USB_DeactivateEndpoint+0xca>
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	b29c      	uxth	r4, r3
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	441a      	add	r2, r3
 80039aa:	4b52      	ldr	r3, [pc, #328]	; (8003af4 <USB_DeactivateEndpoint+0x20c>)
 80039ac:	4323      	orrs	r3, r4
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c8:	b29c      	uxth	r4, r3
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	441a      	add	r2, r3
 80039d4:	4b46      	ldr	r3, [pc, #280]	; (8003af0 <USB_DeactivateEndpoint+0x208>)
 80039d6:	4323      	orrs	r3, r4
 80039d8:	b29b      	uxth	r3, r3
 80039da:	8013      	strh	r3, [r2, #0]
 80039dc:	e10d      	b.n	8003bfa <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	785b      	ldrb	r3, [r3, #1]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 8088 	bne.w	8003af8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b29c      	uxth	r4, r3
 80039f6:	4623      	mov	r3, r4
 80039f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d014      	beq.n	8003a2a <USB_DeactivateEndpoint+0x142>
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a16:	b29c      	uxth	r4, r3
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	441a      	add	r2, r3
 8003a22:	4b34      	ldr	r3, [pc, #208]	; (8003af4 <USB_DeactivateEndpoint+0x20c>)
 8003a24:	4323      	orrs	r3, r4
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b29c      	uxth	r4, r3
 8003a38:	4623      	mov	r3, r4
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d014      	beq.n	8003a6c <USB_DeactivateEndpoint+0x184>
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a58:	b29c      	uxth	r4, r3
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	441a      	add	r2, r3
 8003a64:	4b21      	ldr	r3, [pc, #132]	; (8003aec <USB_DeactivateEndpoint+0x204>)
 8003a66:	4323      	orrs	r3, r4
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	b29c      	uxth	r4, r3
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	441a      	add	r2, r3
 8003a8e:	4b17      	ldr	r3, [pc, #92]	; (8003aec <USB_DeactivateEndpoint+0x204>)
 8003a90:	4323      	orrs	r3, r4
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aac:	b29c      	uxth	r4, r3
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	441a      	add	r2, r3
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <USB_DeactivateEndpoint+0x208>)
 8003aba:	4323      	orrs	r3, r4
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad6:	b29c      	uxth	r4, r3
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	441a      	add	r2, r3
 8003ae2:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <USB_DeactivateEndpoint+0x208>)
 8003ae4:	4323      	orrs	r3, r4
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	8013      	strh	r3, [r2, #0]
 8003aea:	e086      	b.n	8003bfa <USB_DeactivateEndpoint+0x312>
 8003aec:	ffff80c0 	.word	0xffff80c0
 8003af0:	ffff8080 	.word	0xffff8080
 8003af4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29c      	uxth	r4, r3
 8003b06:	4623      	mov	r3, r4
 8003b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d014      	beq.n	8003b3a <USB_DeactivateEndpoint+0x252>
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	b29c      	uxth	r4, r3
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	441a      	add	r2, r3
 8003b32:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <USB_DeactivateEndpoint+0x320>)
 8003b34:	4323      	orrs	r3, r4
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	b29c      	uxth	r4, r3
 8003b48:	4623      	mov	r3, r4
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d014      	beq.n	8003b7c <USB_DeactivateEndpoint+0x294>
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b68:	b29c      	uxth	r4, r3
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	441a      	add	r2, r3
 8003b74:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <USB_DeactivateEndpoint+0x324>)
 8003b76:	4323      	orrs	r3, r4
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	b29c      	uxth	r4, r3
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	441a      	add	r2, r3
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <USB_DeactivateEndpoint+0x320>)
 8003ba0:	4323      	orrs	r3, r4
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bbc:	b29c      	uxth	r4, r3
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	441a      	add	r2, r3
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <USB_DeactivateEndpoint+0x328>)
 8003bca:	4323      	orrs	r3, r4
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	b29c      	uxth	r4, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	441a      	add	r2, r3
 8003bf2:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <USB_DeactivateEndpoint+0x328>)
 8003bf4:	4323      	orrs	r3, r4
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc90      	pop	{r4, r7}
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	ffffc080 	.word	0xffffc080
 8003c0c:	ffff80c0 	.word	0xffff80c0
 8003c10:	ffff8080 	.word	0xffff8080

08003c14 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b095      	sub	sp, #84	; 0x54
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	785b      	ldrb	r3, [r3, #1]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	f040 816d 	bne.w	8003f02 <USB_EPStartXfer+0x2ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d909      	bls.n	8003c48 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c40:	1ad2      	subs	r2, r2, r3
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	619a      	str	r2, [r3, #24]
 8003c46:	e005      	b.n	8003c54 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2200      	movs	r2, #0
 8003c52:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	7b1b      	ldrb	r3, [r3, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d11a      	bne.n	8003c92 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6959      	ldr	r1, [r3, #20]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	88da      	ldrh	r2, [r3, #6]
 8003c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fbb6 	bl	80043da <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003c6e:	687c      	ldr	r4, [r7, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	441c      	add	r4, r3
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4423      	add	r3, r4
 8003c82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	801a      	strh	r2, [r3, #0]
 8003c90:	e11b      	b.n	8003eca <USB_EPStartXfer+0x2b6>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d06a      	beq.n	8003d7e <USB_EPStartXfer+0x16a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ca8:	687c      	ldr	r4, [r7, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d14c      	bne.n	8003d4c <USB_EPStartXfer+0x138>
 8003cb2:	687c      	ldr	r4, [r7, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	441c      	add	r4, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4423      	add	r3, r4
 8003cc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d110      	bne.n	8003cf4 <USB_EPStartXfer+0xe0>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	801a      	strh	r2, [r3, #0]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	e03f      	b.n	8003d74 <USB_EPStartXfer+0x160>
 8003cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8003cf8:	d811      	bhi.n	8003d1e <USB_EPStartXfer+0x10a>
 8003cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8003d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <USB_EPStartXfer+0xfc>
 8003d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	029b      	lsls	r3, r3, #10
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	e02a      	b.n	8003d74 <USB_EPStartXfer+0x160>
 8003d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	647b      	str	r3, [r7, #68]	; 0x44
 8003d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <USB_EPStartXfer+0x120>
 8003d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d30:	3b01      	subs	r3, #1
 8003d32:	647b      	str	r3, [r7, #68]	; 0x44
 8003d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	029b      	lsls	r3, r3, #10
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	e013      	b.n	8003d74 <USB_EPStartXfer+0x160>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d10f      	bne.n	8003d74 <USB_EPStartXfer+0x160>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	441c      	add	r4, r3
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4423      	add	r3, r4
 8003d66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	895b      	ldrh	r3, [r3, #10]
 8003d78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003d7c:	e069      	b.n	8003e52 <USB_EPStartXfer+0x23e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d14c      	bne.n	8003e20 <USB_EPStartXfer+0x20c>
 8003d86:	687c      	ldr	r4, [r7, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	441c      	add	r4, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4423      	add	r3, r4
 8003d9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d9e:	61bb      	str	r3, [r7, #24]
 8003da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d110      	bne.n	8003dc8 <USB_EPStartXfer+0x1b4>
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	e040      	b.n	8003e4a <USB_EPStartXfer+0x236>
 8003dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dca:	2b3e      	cmp	r3, #62	; 0x3e
 8003dcc:	d811      	bhi.n	8003df2 <USB_EPStartXfer+0x1de>
 8003dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd0:	085b      	lsrs	r3, r3, #1
 8003dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8003dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <USB_EPStartXfer+0x1d0>
 8003dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de0:	3301      	adds	r3, #1
 8003de2:	643b      	str	r3, [r7, #64]	; 0x40
 8003de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	029b      	lsls	r3, r3, #10
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	801a      	strh	r2, [r3, #0]
 8003df0:	e02b      	b.n	8003e4a <USB_EPStartXfer+0x236>
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	643b      	str	r3, [r7, #64]	; 0x40
 8003df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <USB_EPStartXfer+0x1f4>
 8003e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e04:	3b01      	subs	r3, #1
 8003e06:	643b      	str	r3, [r7, #64]	; 0x40
 8003e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	029b      	lsls	r3, r3, #10
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	801a      	strh	r2, [r3, #0]
 8003e1e:	e014      	b.n	8003e4a <USB_EPStartXfer+0x236>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d110      	bne.n	8003e4a <USB_EPStartXfer+0x236>
 8003e28:	687c      	ldr	r4, [r7, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	441c      	add	r4, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4423      	add	r3, r4
 8003e3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	891b      	ldrh	r3, [r3, #8]
 8003e4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6959      	ldr	r1, [r3, #20]
 8003e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fabb 	bl	80043da <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d115      	bne.n	8003e98 <USB_EPStartXfer+0x284>
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e82:	b29c      	uxth	r4, r3
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	441a      	add	r2, r3
 8003e8e:	4b96      	ldr	r3, [pc, #600]	; (80040e8 <USB_EPStartXfer+0x4d4>)
 8003e90:	4323      	orrs	r3, r4
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	8013      	strh	r3, [r2, #0]
 8003e96:	e018      	b.n	8003eca <USB_EPStartXfer+0x2b6>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	785b      	ldrb	r3, [r3, #1]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d114      	bne.n	8003eca <USB_EPStartXfer+0x2b6>
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	b29c      	uxth	r4, r3
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	441a      	add	r2, r3
 8003ec2:	4b8a      	ldr	r3, [pc, #552]	; (80040ec <USB_EPStartXfer+0x4d8>)
 8003ec4:	4323      	orrs	r3, r4
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ee0:	b29c      	uxth	r4, r3
 8003ee2:	f084 0310 	eor.w	r3, r4, #16
 8003ee6:	b29c      	uxth	r4, r3
 8003ee8:	f084 0320 	eor.w	r3, r4, #32
 8003eec:	b29c      	uxth	r4, r3
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	441a      	add	r2, r3
 8003ef8:	4b7d      	ldr	r3, [pc, #500]	; (80040f0 <USB_EPStartXfer+0x4dc>)
 8003efa:	4323      	orrs	r3, r4
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	8013      	strh	r3, [r2, #0]
 8003f00:	e153      	b.n	80041aa <USB_EPStartXfer+0x596>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d909      	bls.n	8003f22 <USB_EPStartXfer+0x30e>
    {
      len = ep->maxpacket;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1a:	1ad2      	subs	r2, r2, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	619a      	str	r2, [r3, #24]
 8003f20:	e005      	b.n	8003f2e <USB_EPStartXfer+0x31a>
    }
    else
    {
      len = ep->xfer_len;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	7b1b      	ldrb	r3, [r3, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d14c      	bne.n	8003fd0 <USB_EPStartXfer+0x3bc>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003f36:	687c      	ldr	r4, [r7, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	441c      	add	r4, r3
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4423      	add	r3, r4
 8003f4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f4e:	623b      	str	r3, [r7, #32]
 8003f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d110      	bne.n	8003f78 <USB_EPStartXfer+0x364>
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	801a      	strh	r2, [r3, #0]
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	801a      	strh	r2, [r3, #0]
 8003f76:	e0fd      	b.n	8004174 <USB_EPStartXfer+0x560>
 8003f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f7a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f7c:	d811      	bhi.n	8003fa2 <USB_EPStartXfer+0x38e>
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <USB_EPStartXfer+0x380>
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f90:	3301      	adds	r3, #1
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	029b      	lsls	r3, r3, #10
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	e0e8      	b.n	8004174 <USB_EPStartXfer+0x560>
 8003fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <USB_EPStartXfer+0x3a4>
 8003fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	029b      	lsls	r3, r3, #10
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	801a      	strh	r2, [r3, #0]
 8003fce:	e0d1      	b.n	8004174 <USB_EPStartXfer+0x560>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d14c      	bne.n	8004072 <USB_EPStartXfer+0x45e>
 8003fd8:	687c      	ldr	r4, [r7, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	441c      	add	r4, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4423      	add	r3, r4
 8003fec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d110      	bne.n	800401a <USB_EPStartXfer+0x406>
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004000:	b29a      	uxth	r2, r3
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	801a      	strh	r2, [r3, #0]
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004012:	b29a      	uxth	r2, r3
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	e040      	b.n	800409c <USB_EPStartXfer+0x488>
 800401a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401c:	2b3e      	cmp	r3, #62	; 0x3e
 800401e:	d811      	bhi.n	8004044 <USB_EPStartXfer+0x430>
 8004020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	63bb      	str	r3, [r7, #56]	; 0x38
 8004026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <USB_EPStartXfer+0x422>
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	3301      	adds	r3, #1
 8004034:	63bb      	str	r3, [r7, #56]	; 0x38
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	b29b      	uxth	r3, r3
 800403a:	029b      	lsls	r3, r3, #10
 800403c:	b29a      	uxth	r2, r3
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	e02b      	b.n	800409c <USB_EPStartXfer+0x488>
 8004044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	63bb      	str	r3, [r7, #56]	; 0x38
 800404a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <USB_EPStartXfer+0x446>
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	3b01      	subs	r3, #1
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	b29b      	uxth	r3, r3
 800405e:	029b      	lsls	r3, r3, #10
 8004060:	b29b      	uxth	r3, r3
 8004062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800406a:	b29a      	uxth	r2, r3
 800406c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	e014      	b.n	800409c <USB_EPStartXfer+0x488>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d110      	bne.n	800409c <USB_EPStartXfer+0x488>
 800407a:	687c      	ldr	r4, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004082:	b29b      	uxth	r3, r3
 8004084:	441c      	add	r4, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4423      	add	r3, r4
 800408e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004092:	633b      	str	r3, [r7, #48]	; 0x30
 8004094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004096:	b29a      	uxth	r2, r3
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	801a      	strh	r2, [r3, #0]
 800409c:	687c      	ldr	r4, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	785b      	ldrb	r3, [r3, #1]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d152      	bne.n	800414c <USB_EPStartXfer+0x538>
 80040a6:	687c      	ldr	r4, [r7, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	441c      	add	r4, r3
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4423      	add	r3, r4
 80040ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
 80040c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d116      	bne.n	80040f4 <USB_EPStartXfer+0x4e0>
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	801a      	strh	r2, [r3, #0]
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	801a      	strh	r2, [r3, #0]
 80040e6:	e045      	b.n	8004174 <USB_EPStartXfer+0x560>
 80040e8:	ffff80c0 	.word	0xffff80c0
 80040ec:	ffffc080 	.word	0xffffc080
 80040f0:	ffff8080 	.word	0xffff8080
 80040f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f6:	2b3e      	cmp	r3, #62	; 0x3e
 80040f8:	d811      	bhi.n	800411e <USB_EPStartXfer+0x50a>
 80040fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <USB_EPStartXfer+0x4fc>
 800410a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410c:	3301      	adds	r3, #1
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004112:	b29b      	uxth	r3, r3
 8004114:	029b      	lsls	r3, r3, #10
 8004116:	b29a      	uxth	r2, r3
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	801a      	strh	r2, [r3, #0]
 800411c:	e02a      	b.n	8004174 <USB_EPStartXfer+0x560>
 800411e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
 8004124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <USB_EPStartXfer+0x520>
 800412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004130:	3b01      	subs	r3, #1
 8004132:	637b      	str	r3, [r7, #52]	; 0x34
 8004134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004136:	b29b      	uxth	r3, r3
 8004138:	029b      	lsls	r3, r3, #10
 800413a:	b29b      	uxth	r3, r3
 800413c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004144:	b29a      	uxth	r2, r3
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	801a      	strh	r2, [r3, #0]
 800414a:	e013      	b.n	8004174 <USB_EPStartXfer+0x560>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	785b      	ldrb	r3, [r3, #1]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d10f      	bne.n	8004174 <USB_EPStartXfer+0x560>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415a:	b29b      	uxth	r3, r3
 800415c:	441c      	add	r4, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4423      	add	r3, r4
 8004166:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28
 800416c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800416e:	b29a      	uxth	r2, r3
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	b29c      	uxth	r4, r3
 800418c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004190:	b29c      	uxth	r4, r3
 8004192:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004196:	b29c      	uxth	r4, r3
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <USB_EPStartXfer+0x5a0>)
 80041a4:	4323      	orrs	r3, r4
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3754      	adds	r7, #84	; 0x54
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd90      	pop	{r4, r7, pc}
 80041b4:	ffff8080 	.word	0xffff8080

080041b8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041b8:	b490      	push	{r4, r7}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	785b      	ldrb	r3, [r3, #1]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d018      	beq.n	80041fc <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e0:	b29c      	uxth	r4, r3
 80041e2:	f084 0310 	eor.w	r3, r4, #16
 80041e6:	b29c      	uxth	r4, r3
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <USB_EPSetStall+0x80>)
 80041f4:	4323      	orrs	r3, r4
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]
 80041fa:	e017      	b.n	800422c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	b29c      	uxth	r4, r3
 8004214:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004218:	b29c      	uxth	r4, r3
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	441a      	add	r2, r3
 8004224:	4b04      	ldr	r3, [pc, #16]	; (8004238 <USB_EPSetStall+0x80>)
 8004226:	4323      	orrs	r3, r4
 8004228:	b29b      	uxth	r3, r3
 800422a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bc90      	pop	{r4, r7}
 8004236:	4770      	bx	lr
 8004238:	ffff8080 	.word	0xffff8080

0800423c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800423c:	b490      	push	{r4, r7}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	7b1b      	ldrb	r3, [r3, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d17d      	bne.n	800434a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d03d      	beq.n	80042d2 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29c      	uxth	r4, r3
 8004264:	4623      	mov	r3, r4
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d014      	beq.n	8004298 <USB_EPClearStall+0x5c>
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004284:	b29c      	uxth	r4, r3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	441a      	add	r2, r3
 8004290:	4b31      	ldr	r3, [pc, #196]	; (8004358 <USB_EPClearStall+0x11c>)
 8004292:	4323      	orrs	r3, r4
 8004294:	b29b      	uxth	r3, r3
 8004296:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	78db      	ldrb	r3, [r3, #3]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d054      	beq.n	800434a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b6:	b29c      	uxth	r4, r3
 80042b8:	f084 0320 	eor.w	r3, r4, #32
 80042bc:	b29c      	uxth	r4, r3
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	441a      	add	r2, r3
 80042c8:	4b24      	ldr	r3, [pc, #144]	; (800435c <USB_EPClearStall+0x120>)
 80042ca:	4323      	orrs	r3, r4
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	8013      	strh	r3, [r2, #0]
 80042d0:	e03b      	b.n	800434a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29c      	uxth	r4, r3
 80042e0:	4623      	mov	r3, r4
 80042e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d014      	beq.n	8004314 <USB_EPClearStall+0xd8>
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004300:	b29c      	uxth	r4, r3
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	441a      	add	r2, r3
 800430c:	4b14      	ldr	r3, [pc, #80]	; (8004360 <USB_EPClearStall+0x124>)
 800430e:	4323      	orrs	r3, r4
 8004310:	b29b      	uxth	r3, r3
 8004312:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	b29c      	uxth	r4, r3
 800432c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004330:	b29c      	uxth	r4, r3
 8004332:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004336:	b29c      	uxth	r4, r3
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <USB_EPClearStall+0x120>)
 8004344:	4323      	orrs	r3, r4
 8004346:	b29b      	uxth	r3, r3
 8004348:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bc90      	pop	{r4, r7}
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	ffff80c0 	.word	0xffff80c0
 800435c:	ffff8080 	.word	0xffff8080
 8004360:	ffffc080 	.word	0xffffc080

08004364 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2280      	movs	r2, #128	; 0x80
 800437a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80043b4:	68fb      	ldr	r3, [r7, #12]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80043da:	b480      	push	{r7}
 80043dc:	b08d      	sub	sp, #52	; 0x34
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	4611      	mov	r1, r2
 80043e6:	461a      	mov	r2, r3
 80043e8:	460b      	mov	r3, r1
 80043ea:	80fb      	strh	r3, [r7, #6]
 80043ec:	4613      	mov	r3, r2
 80043ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80043f0:	88bb      	ldrh	r3, [r7, #4]
 80043f2:	3301      	adds	r3, #1
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004410:	e01b      	b.n	800444a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	3301      	adds	r3, #1
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	b29b      	uxth	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	b29a      	uxth	r2, r3
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	3302      	adds	r3, #2
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	3301      	adds	r3, #1
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	3b01      	subs	r3, #1
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e0      	bne.n	8004412 <USB_WritePMA+0x38>
  }
}
 8004450:	bf00      	nop
 8004452:	3734      	adds	r7, #52	; 0x34
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800445c:	b480      	push	{r7}
 800445e:	b08b      	sub	sp, #44	; 0x2c
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	4611      	mov	r1, r2
 8004468:	461a      	mov	r2, r3
 800446a:	460b      	mov	r3, r1
 800446c:	80fb      	strh	r3, [r7, #6]
 800446e:	4613      	mov	r3, r2
 8004470:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004472:	88bb      	ldrh	r3, [r7, #4]
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	b29b      	uxth	r3, r3
 8004478:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800448c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
 8004492:	e018      	b.n	80044c6 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	3302      	adds	r3, #2
 80044a0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3301      	adds	r3, #1
 80044ae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3301      	adds	r3, #1
 80044be:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	3b01      	subs	r3, #1
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e3      	bne.n	8004494 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80044cc:	88bb      	ldrh	r3, [r7, #4]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	701a      	strb	r2, [r3, #0]
  }
}
 80044e8:	bf00      	nop
 80044ea:	372c      	adds	r7, #44	; 0x2c
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	7c1b      	ldrb	r3, [r3, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d115      	bne.n	8004538 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800450c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004510:	2202      	movs	r2, #2
 8004512:	2181      	movs	r1, #129	; 0x81
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f001 ff70 	bl	80063fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004524:	2202      	movs	r2, #2
 8004526:	2101      	movs	r1, #1
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f001 ff66 	bl	80063fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004536:	e012      	b.n	800455e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004538:	2340      	movs	r3, #64	; 0x40
 800453a:	2202      	movs	r2, #2
 800453c:	2181      	movs	r1, #129	; 0x81
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f001 ff5b 	bl	80063fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800454a:	2340      	movs	r3, #64	; 0x40
 800454c:	2202      	movs	r2, #2
 800454e:	2101      	movs	r1, #1
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f001 ff52 	bl	80063fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800455e:	2308      	movs	r3, #8
 8004560:	2203      	movs	r2, #3
 8004562:	2182      	movs	r1, #130	; 0x82
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f001 ff48 	bl	80063fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004570:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004574:	f002 f862 	bl	800663c <USBD_static_malloc>
 8004578:	4602      	mov	r2, r0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800458a:	2301      	movs	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
 800458e:	e026      	b.n	80045de <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004596:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	7c1b      	ldrb	r3, [r3, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045c4:	2101      	movs	r1, #1
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f002 f802 	bl	80065d0 <USBD_LL_PrepareReceive>
 80045cc:	e007      	b.n	80045de <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045d4:	2340      	movs	r3, #64	; 0x40
 80045d6:	2101      	movs	r1, #1
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f001 fff9 	bl	80065d0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80045de:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80045f8:	2181      	movs	r1, #129	; 0x81
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f001 ff23 	bl	8006446 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004606:	2101      	movs	r1, #1
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f001 ff1c 	bl	8006446 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004616:	2182      	movs	r1, #130	; 0x82
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f001 ff14 	bl	8006446 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00e      	beq.n	800464c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800463e:	4618      	mov	r0, r3
 8004640:	f002 f80a 	bl	8006658 <USBD_static_free>
    pdev->pClassData = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800464c:	7bfb      	ldrb	r3, [r7, #15]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b086      	sub	sp, #24
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004666:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800467c:	2b00      	cmp	r3, #0
 800467e:	d039      	beq.n	80046f4 <USBD_CDC_Setup+0x9e>
 8004680:	2b20      	cmp	r3, #32
 8004682:	d17c      	bne.n	800477e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	88db      	ldrh	r3, [r3, #6]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d029      	beq.n	80046e0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b25b      	sxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	da11      	bge.n	80046ba <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80046a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	88d2      	ldrh	r2, [r2, #6]
 80046a8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80046aa:	6939      	ldr	r1, [r7, #16]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	88db      	ldrh	r3, [r3, #6]
 80046b0:	461a      	mov	r2, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f001 f9d0 	bl	8005a58 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80046b8:	e068      	b.n	800478c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	785a      	ldrb	r2, [r3, #1]
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	88db      	ldrh	r3, [r3, #6]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80046d0:	6939      	ldr	r1, [r7, #16]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	88db      	ldrh	r3, [r3, #6]
 80046d6:	461a      	mov	r2, r3
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f001 f9eb 	bl	8005ab4 <USBD_CtlPrepareRx>
      break;
 80046de:	e055      	b.n	800478c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	7850      	ldrb	r0, [r2, #1]
 80046ec:	2200      	movs	r2, #0
 80046ee:	6839      	ldr	r1, [r7, #0]
 80046f0:	4798      	blx	r3
      break;
 80046f2:	e04b      	b.n	800478c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	785b      	ldrb	r3, [r3, #1]
 80046f8:	2b0a      	cmp	r3, #10
 80046fa:	d017      	beq.n	800472c <USBD_CDC_Setup+0xd6>
 80046fc:	2b0b      	cmp	r3, #11
 80046fe:	d029      	beq.n	8004754 <USBD_CDC_Setup+0xfe>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d133      	bne.n	800476c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800470a:	2b03      	cmp	r3, #3
 800470c:	d107      	bne.n	800471e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800470e:	f107 030c 	add.w	r3, r7, #12
 8004712:	2202      	movs	r2, #2
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f001 f99e 	bl	8005a58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800471c:	e02e      	b.n	800477c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f001 f92e 	bl	8005982 <USBD_CtlError>
            ret = USBD_FAIL;
 8004726:	2302      	movs	r3, #2
 8004728:	75fb      	strb	r3, [r7, #23]
          break;
 800472a:	e027      	b.n	800477c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004732:	2b03      	cmp	r3, #3
 8004734:	d107      	bne.n	8004746 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004736:	f107 030f 	add.w	r3, r7, #15
 800473a:	2201      	movs	r2, #1
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f001 f98a 	bl	8005a58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004744:	e01a      	b.n	800477c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004746:	6839      	ldr	r1, [r7, #0]
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f001 f91a 	bl	8005982 <USBD_CtlError>
            ret = USBD_FAIL;
 800474e:	2302      	movs	r3, #2
 8004750:	75fb      	strb	r3, [r7, #23]
          break;
 8004752:	e013      	b.n	800477c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800475a:	2b03      	cmp	r3, #3
 800475c:	d00d      	beq.n	800477a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800475e:	6839      	ldr	r1, [r7, #0]
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f001 f90e 	bl	8005982 <USBD_CtlError>
            ret = USBD_FAIL;
 8004766:	2302      	movs	r3, #2
 8004768:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800476a:	e006      	b.n	800477a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f001 f907 	bl	8005982 <USBD_CtlError>
          ret = USBD_FAIL;
 8004774:	2302      	movs	r3, #2
 8004776:	75fb      	strb	r3, [r7, #23]
          break;
 8004778:	e000      	b.n	800477c <USBD_CDC_Setup+0x126>
          break;
 800477a:	bf00      	nop
      }
      break;
 800477c:	e006      	b.n	800478c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 f8fe 	bl	8005982 <USBD_CtlError>
      ret = USBD_FAIL;
 8004786:	2302      	movs	r3, #2
 8004788:	75fb      	strb	r3, [r7, #23]
      break;
 800478a:	bf00      	nop
  }

  return ret;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047a8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047b0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d037      	beq.n	800482c <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80047bc:	78fa      	ldrb	r2, [r7, #3]
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	331c      	adds	r3, #28
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d026      	beq.n	8004820 <USBD_CDC_DataIn+0x8a>
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	331c      	adds	r3, #28
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	0152      	lsls	r2, r2, #5
 80047ea:	440a      	add	r2, r1
 80047ec:	3238      	adds	r2, #56	; 0x38
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80047f4:	fb02 f201 	mul.w	r2, r2, r1
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d110      	bne.n	8004820 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80047fe:	78fa      	ldrb	r2, [r7, #3]
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	331c      	adds	r3, #28
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004812:	78f9      	ldrb	r1, [r7, #3]
 8004814:	2300      	movs	r3, #0
 8004816:	2200      	movs	r2, #0
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f001 feb6 	bl	800658a <USBD_LL_Transmit>
 800481e:	e003      	b.n	8004828 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	e000      	b.n	800482e <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800482c:	2302      	movs	r3, #2
  }
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	460b      	mov	r3, r1
 8004840:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004848:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 fee1 	bl	8006616 <USBD_LL_GetRxDataSize>
 8004854:	4602      	mov	r2, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00d      	beq.n	8004882 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800487a:	4611      	mov	r1, r2
 800487c:	4798      	blx	r3

    return USBD_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800489a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d015      	beq.n	80048d2 <USBD_CDC_EP0_RxReady+0x46>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80048ac:	2bff      	cmp	r3, #255	; 0xff
 80048ae:	d010      	beq.n	80048d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80048be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80048c6:	b292      	uxth	r2, r2
 80048c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	22ff      	movs	r2, #255	; 0xff
 80048ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2243      	movs	r2, #67	; 0x43
 80048e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80048ea:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	20000090 	.word	0x20000090

080048fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2243      	movs	r2, #67	; 0x43
 8004908:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800490a:	4b03      	ldr	r3, [pc, #12]	; (8004918 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	2000004c 	.word	0x2000004c

0800491c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2243      	movs	r2, #67	; 0x43
 8004928:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800492a:	4b03      	ldr	r3, [pc, #12]	; (8004938 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	200000d4 	.word	0x200000d4

0800493c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	220a      	movs	r2, #10
 8004948:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800494a:	4b03      	ldr	r3, [pc, #12]	; (8004958 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	20000008 	.word	0x20000008

0800495c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004966:	2302      	movs	r3, #2
 8004968:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800498a:	b480      	push	{r7}
 800498c:	b087      	sub	sp, #28
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	4613      	mov	r3, r2
 8004996:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800499e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80049a8:	88fa      	ldrh	r2, [r7, #6]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80049be:	b480      	push	{r7}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ce:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d017      	beq.n	8004a30 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	7c1b      	ldrb	r3, [r3, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d109      	bne.n	8004a1c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a12:	2101      	movs	r1, #1
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 fddb 	bl	80065d0 <USBD_LL_PrepareReceive>
 8004a1a:	e007      	b.n	8004a2c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a22:	2340      	movs	r3, #64	; 0x40
 8004a24:	2101      	movs	r1, #1
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f001 fdd2 	bl	80065d0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e000      	b.n	8004a32 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004a30:	2302      	movs	r3, #2
  }
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	4613      	mov	r3, r2
 8004a46:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e01a      	b.n	8004a88 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	79fa      	ldrb	r2, [r7, #7]
 8004a7e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f001 fc45 	bl	8006310 <USBD_LL_Init>

  return USBD_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d006      	beq.n	8004ab2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	73fb      	strb	r3, [r7, #15]
 8004ab0:	e001      	b.n	8004ab6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f001 fc79 	bl	80063c4 <USBD_LL_Start>

  return USBD_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	460b      	mov	r3, r1
 8004afc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004afe:	2302      	movs	r3, #2
 8004b00:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00c      	beq.n	8004b26 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	4611      	mov	r1, r2
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	4798      	blx	r3
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	78fa      	ldrb	r2, [r7, #3]
 8004b46:	4611      	mov	r1, r2
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	4798      	blx	r3

  return USBD_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004b66:	6839      	ldr	r1, [r7, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fecd 	bl	8005908 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d00c      	beq.n	8004bac <USBD_LL_SetupStage+0x56>
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d302      	bcc.n	8004b9c <USBD_LL_SetupStage+0x46>
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d010      	beq.n	8004bbc <USBD_LL_SetupStage+0x66>
 8004b9a:	e017      	b.n	8004bcc <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f9cd 	bl	8004f44 <USBD_StdDevReq>
      break;
 8004baa:	e01a      	b.n	8004be2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fa2f 	bl	8005018 <USBD_StdItfReq>
      break;
 8004bba:	e012      	b.n	8004be2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fa6d 	bl	80050a4 <USBD_StdEPReq>
      break;
 8004bca:	e00a      	b.n	8004be2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004bd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f001 fc52 	bl	8006484 <USBD_LL_StallEP>
      break;
 8004be0:	bf00      	nop
  }

  return USBD_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004bfa:	7afb      	ldrb	r3, [r7, #11]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d14b      	bne.n	8004c98 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004c06:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d134      	bne.n	8004c7c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d919      	bls.n	8004c52 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	1ad2      	subs	r2, r2, r3
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d203      	bcs.n	8004c40 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	e002      	b.n	8004c46 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 ff50 	bl	8005af0 <USBD_CtlContinueRx>
 8004c50:	e038      	b.n	8004cc4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d105      	bne.n	8004c74 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 ff4d 	bl	8005b14 <USBD_CtlSendStatus>
 8004c7a:	e023      	b.n	8004cc4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c82:	2b05      	cmp	r3, #5
 8004c84:	d11e      	bne.n	8004cc4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004c8e:	2100      	movs	r1, #0
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f001 fbf7 	bl	8006484 <USBD_LL_StallEP>
 8004c96:	e015      	b.n	8004cc4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00d      	beq.n	8004cc0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d108      	bne.n	8004cc0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	7afa      	ldrb	r2, [r7, #11]
 8004cb8:	4611      	mov	r1, r2
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	4798      	blx	r3
 8004cbe:	e001      	b.n	8004cc4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e000      	b.n	8004cc6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	607a      	str	r2, [r7, #4]
 8004cda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004cdc:	7afb      	ldrb	r3, [r7, #11]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d17f      	bne.n	8004de2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3314      	adds	r3, #20
 8004ce6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d15c      	bne.n	8004dac <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d915      	bls.n	8004d2a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	1ad2      	subs	r2, r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 feba 	bl	8005a90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2100      	movs	r1, #0
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f001 fc54 	bl	80065d0 <USBD_LL_PrepareReceive>
 8004d28:	e04e      	b.n	8004dc8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	6912      	ldr	r2, [r2, #16]
 8004d32:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d36:	fb02 f201 	mul.w	r2, r2, r1
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d11c      	bne.n	8004d7a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d316      	bcc.n	8004d7a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d20f      	bcs.n	8004d7a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fe96 	bl	8005a90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2100      	movs	r1, #0
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f001 fc2c 	bl	80065d0 <USBD_LL_PrepareReceive>
 8004d78:	e026      	b.n	8004dc8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d105      	bne.n	8004d9c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004d9c:	2180      	movs	r1, #128	; 0x80
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f001 fb70 	bl	8006484 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fec8 	bl	8005b3a <USBD_CtlReceiveStatus>
 8004daa:	e00d      	b.n	8004dc8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d004      	beq.n	8004dc0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d103      	bne.n	8004dc8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004dc0:	2180      	movs	r1, #128	; 0x80
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f001 fb5e 	bl	8006484 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d11d      	bne.n	8004e0e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7ff fe82 	bl	8004adc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004de0:	e015      	b.n	8004e0e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00d      	beq.n	8004e0a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d108      	bne.n	8004e0a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	7afa      	ldrb	r2, [r7, #11]
 8004e02:	4611      	mov	r1, r2
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	4798      	blx	r3
 8004e08:	e001      	b.n	8004e0e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e000      	b.n	8004e10 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e20:	2340      	movs	r3, #64	; 0x40
 8004e22:	2200      	movs	r2, #0
 8004e24:	2100      	movs	r1, #0
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f001 fae7 	bl	80063fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2240      	movs	r2, #64	; 0x40
 8004e38:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e3c:	2340      	movs	r3, #64	; 0x40
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2180      	movs	r1, #128	; 0x80
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f001 fad9 	bl	80063fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2240      	movs	r2, #64	; 0x40
 8004e52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d009      	beq.n	8004e90 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6852      	ldr	r2, [r2, #4]
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4798      	blx	r3
  }

  return USBD_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d105      	bne.n	8004f02 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d10b      	bne.n	8004f3a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d004      	beq.n	8004f68 <USBD_StdDevReq+0x24>
 8004f5e:	2b40      	cmp	r3, #64	; 0x40
 8004f60:	d002      	beq.n	8004f68 <USBD_StdDevReq+0x24>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <USBD_StdDevReq+0x34>
 8004f66:	e04c      	b.n	8005002 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	6839      	ldr	r1, [r7, #0]
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
      break;
 8004f76:	e049      	b.n	800500c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	785b      	ldrb	r3, [r3, #1]
 8004f7c:	2b09      	cmp	r3, #9
 8004f7e:	d83a      	bhi.n	8004ff6 <USBD_StdDevReq+0xb2>
 8004f80:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <USBD_StdDevReq+0x44>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fd9 	.word	0x08004fd9
 8004f8c:	08004fed 	.word	0x08004fed
 8004f90:	08004ff7 	.word	0x08004ff7
 8004f94:	08004fe3 	.word	0x08004fe3
 8004f98:	08004ff7 	.word	0x08004ff7
 8004f9c:	08004fbb 	.word	0x08004fbb
 8004fa0:	08004fb1 	.word	0x08004fb1
 8004fa4:	08004ff7 	.word	0x08004ff7
 8004fa8:	08004fcf 	.word	0x08004fcf
 8004fac:	08004fc5 	.word	0x08004fc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9d4 	bl	8005360 <USBD_GetDescriptor>
          break;
 8004fb8:	e022      	b.n	8005000 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fb37 	bl	8005630 <USBD_SetAddress>
          break;
 8004fc2:	e01d      	b.n	8005000 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fb74 	bl	80056b4 <USBD_SetConfig>
          break;
 8004fcc:	e018      	b.n	8005000 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fbfd 	bl	80057d0 <USBD_GetConfig>
          break;
 8004fd6:	e013      	b.n	8005000 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fc2c 	bl	8005838 <USBD_GetStatus>
          break;
 8004fe0:	e00e      	b.n	8005000 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004fe2:	6839      	ldr	r1, [r7, #0]
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fc5a 	bl	800589e <USBD_SetFeature>
          break;
 8004fea:	e009      	b.n	8005000 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fc69 	bl	80058c6 <USBD_ClrFeature>
          break;
 8004ff4:	e004      	b.n	8005000 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004ff6:	6839      	ldr	r1, [r7, #0]
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fcc2 	bl	8005982 <USBD_CtlError>
          break;
 8004ffe:	bf00      	nop
      }
      break;
 8005000:	e004      	b.n	800500c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fcbc 	bl	8005982 <USBD_CtlError>
      break;
 800500a:	bf00      	nop
  }

  return ret;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop

08005018 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800502e:	2b20      	cmp	r3, #32
 8005030:	d003      	beq.n	800503a <USBD_StdItfReq+0x22>
 8005032:	2b40      	cmp	r3, #64	; 0x40
 8005034:	d001      	beq.n	800503a <USBD_StdItfReq+0x22>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d12a      	bne.n	8005090 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005040:	3b01      	subs	r3, #1
 8005042:	2b02      	cmp	r3, #2
 8005044:	d81d      	bhi.n	8005082 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	889b      	ldrh	r3, [r3, #4]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d813      	bhi.n	8005078 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
 800505e:	4603      	mov	r3, r0
 8005060:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	88db      	ldrh	r3, [r3, #6]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d110      	bne.n	800508c <USBD_StdItfReq+0x74>
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10d      	bne.n	800508c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fd4f 	bl	8005b14 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005076:	e009      	b.n	800508c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005078:	6839      	ldr	r1, [r7, #0]
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fc81 	bl	8005982 <USBD_CtlError>
          break;
 8005080:	e004      	b.n	800508c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fc7c 	bl	8005982 <USBD_CtlError>
          break;
 800508a:	e000      	b.n	800508e <USBD_StdItfReq+0x76>
          break;
 800508c:	bf00      	nop
      }
      break;
 800508e:	e004      	b.n	800509a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fc75 	bl	8005982 <USBD_CtlError>
      break;
 8005098:	bf00      	nop
  }

  return USBD_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	889b      	ldrh	r3, [r3, #4]
 80050b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d004      	beq.n	80050ce <USBD_StdEPReq+0x2a>
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d002      	beq.n	80050ce <USBD_StdEPReq+0x2a>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <USBD_StdEPReq+0x3a>
 80050cc:	e13d      	b.n	800534a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	6839      	ldr	r1, [r7, #0]
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
      break;
 80050dc:	e13a      	b.n	8005354 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d10a      	bne.n	8005100 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	6839      	ldr	r1, [r7, #0]
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	4798      	blx	r3
 80050f8:	4603      	mov	r3, r0
 80050fa:	73fb      	strb	r3, [r7, #15]

        return ret;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	e12a      	b.n	8005356 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	785b      	ldrb	r3, [r3, #1]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d03e      	beq.n	8005186 <USBD_StdEPReq+0xe2>
 8005108:	2b03      	cmp	r3, #3
 800510a:	d002      	beq.n	8005112 <USBD_StdEPReq+0x6e>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d070      	beq.n	80051f2 <USBD_StdEPReq+0x14e>
 8005110:	e115      	b.n	800533e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005118:	2b02      	cmp	r3, #2
 800511a:	d002      	beq.n	8005122 <USBD_StdEPReq+0x7e>
 800511c:	2b03      	cmp	r3, #3
 800511e:	d015      	beq.n	800514c <USBD_StdEPReq+0xa8>
 8005120:	e02b      	b.n	800517a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005122:	7bbb      	ldrb	r3, [r7, #14]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00c      	beq.n	8005142 <USBD_StdEPReq+0x9e>
 8005128:	7bbb      	ldrb	r3, [r7, #14]
 800512a:	2b80      	cmp	r3, #128	; 0x80
 800512c:	d009      	beq.n	8005142 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800512e:	7bbb      	ldrb	r3, [r7, #14]
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f001 f9a6 	bl	8006484 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005138:	2180      	movs	r1, #128	; 0x80
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 f9a2 	bl	8006484 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005140:	e020      	b.n	8005184 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fc1c 	bl	8005982 <USBD_CtlError>
              break;
 800514a:	e01b      	b.n	8005184 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	885b      	ldrh	r3, [r3, #2]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10e      	bne.n	8005172 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005154:	7bbb      	ldrb	r3, [r7, #14]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <USBD_StdEPReq+0xce>
 800515a:	7bbb      	ldrb	r3, [r7, #14]
 800515c:	2b80      	cmp	r3, #128	; 0x80
 800515e:	d008      	beq.n	8005172 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	88db      	ldrh	r3, [r3, #6]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d104      	bne.n	8005172 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005168:	7bbb      	ldrb	r3, [r7, #14]
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f001 f989 	bl	8006484 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fcce 	bl	8005b14 <USBD_CtlSendStatus>

              break;
 8005178:	e004      	b.n	8005184 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800517a:	6839      	ldr	r1, [r7, #0]
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fc00 	bl	8005982 <USBD_CtlError>
              break;
 8005182:	bf00      	nop
          }
          break;
 8005184:	e0e0      	b.n	8005348 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800518c:	2b02      	cmp	r3, #2
 800518e:	d002      	beq.n	8005196 <USBD_StdEPReq+0xf2>
 8005190:	2b03      	cmp	r3, #3
 8005192:	d015      	beq.n	80051c0 <USBD_StdEPReq+0x11c>
 8005194:	e026      	b.n	80051e4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005196:	7bbb      	ldrb	r3, [r7, #14]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00c      	beq.n	80051b6 <USBD_StdEPReq+0x112>
 800519c:	7bbb      	ldrb	r3, [r7, #14]
 800519e:	2b80      	cmp	r3, #128	; 0x80
 80051a0:	d009      	beq.n	80051b6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80051a2:	7bbb      	ldrb	r3, [r7, #14]
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f001 f96c 	bl	8006484 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80051ac:	2180      	movs	r1, #128	; 0x80
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f001 f968 	bl	8006484 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80051b4:	e01c      	b.n	80051f0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80051b6:	6839      	ldr	r1, [r7, #0]
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fbe2 	bl	8005982 <USBD_CtlError>
              break;
 80051be:	e017      	b.n	80051f0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	885b      	ldrh	r3, [r3, #2]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d112      	bne.n	80051ee <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80051c8:	7bbb      	ldrb	r3, [r7, #14]
 80051ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80051d2:	7bbb      	ldrb	r3, [r7, #14]
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f001 f973 	bl	80064c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fc99 	bl	8005b14 <USBD_CtlSendStatus>
              }
              break;
 80051e2:	e004      	b.n	80051ee <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fbcb 	bl	8005982 <USBD_CtlError>
              break;
 80051ec:	e000      	b.n	80051f0 <USBD_StdEPReq+0x14c>
              break;
 80051ee:	bf00      	nop
          }
          break;
 80051f0:	e0aa      	b.n	8005348 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d002      	beq.n	8005202 <USBD_StdEPReq+0x15e>
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d032      	beq.n	8005266 <USBD_StdEPReq+0x1c2>
 8005200:	e097      	b.n	8005332 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005202:	7bbb      	ldrb	r3, [r7, #14]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <USBD_StdEPReq+0x174>
 8005208:	7bbb      	ldrb	r3, [r7, #14]
 800520a:	2b80      	cmp	r3, #128	; 0x80
 800520c:	d004      	beq.n	8005218 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fbb6 	bl	8005982 <USBD_CtlError>
                break;
 8005216:	e091      	b.n	800533c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800521c:	2b00      	cmp	r3, #0
 800521e:	da0b      	bge.n	8005238 <USBD_StdEPReq+0x194>
 8005220:	7bbb      	ldrb	r3, [r7, #14]
 8005222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	3310      	adds	r3, #16
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	4413      	add	r3, r2
 8005234:	3304      	adds	r3, #4
 8005236:	e00b      	b.n	8005250 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005238:	7bbb      	ldrb	r3, [r7, #14]
 800523a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	4413      	add	r3, r2
 800524e:	3304      	adds	r3, #4
 8005250:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2202      	movs	r2, #2
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fbfa 	bl	8005a58 <USBD_CtlSendData>
              break;
 8005264:	e06a      	b.n	800533c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800526a:	2b00      	cmp	r3, #0
 800526c:	da11      	bge.n	8005292 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800526e:	7bbb      	ldrb	r3, [r7, #14]
 8005270:	f003 020f 	and.w	r2, r3, #15
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3318      	adds	r3, #24
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d117      	bne.n	80052b8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fb79 	bl	8005982 <USBD_CtlError>
                  break;
 8005290:	e054      	b.n	800533c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005292:	7bbb      	ldrb	r3, [r7, #14]
 8005294:	f003 020f 	and.w	r2, r3, #15
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d104      	bne.n	80052b8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80052ae:	6839      	ldr	r1, [r7, #0]
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fb66 	bl	8005982 <USBD_CtlError>
                  break;
 80052b6:	e041      	b.n	800533c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	da0b      	bge.n	80052d8 <USBD_StdEPReq+0x234>
 80052c0:	7bbb      	ldrb	r3, [r7, #14]
 80052c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	3310      	adds	r3, #16
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	4413      	add	r3, r2
 80052d4:	3304      	adds	r3, #4
 80052d6:	e00b      	b.n	80052f0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80052d8:	7bbb      	ldrb	r3, [r7, #14]
 80052da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	3304      	adds	r3, #4
 80052f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80052f2:	7bbb      	ldrb	r3, [r7, #14]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <USBD_StdEPReq+0x25a>
 80052f8:	7bbb      	ldrb	r3, [r7, #14]
 80052fa:	2b80      	cmp	r3, #128	; 0x80
 80052fc:	d103      	bne.n	8005306 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e00e      	b.n	8005324 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005306:	7bbb      	ldrb	r3, [r7, #14]
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f001 f8f8 	bl	8006500 <USBD_LL_IsStallEP>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2201      	movs	r2, #1
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	e002      	b.n	8005324 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2202      	movs	r2, #2
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fb94 	bl	8005a58 <USBD_CtlSendData>
              break;
 8005330:	e004      	b.n	800533c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fb24 	bl	8005982 <USBD_CtlError>
              break;
 800533a:	bf00      	nop
          }
          break;
 800533c:	e004      	b.n	8005348 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fb1e 	bl	8005982 <USBD_CtlError>
          break;
 8005346:	bf00      	nop
      }
      break;
 8005348:	e004      	b.n	8005354 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fb18 	bl	8005982 <USBD_CtlError>
      break;
 8005352:	bf00      	nop
  }

  return ret;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	885b      	ldrh	r3, [r3, #2]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	2b06      	cmp	r3, #6
 8005382:	f200 8128 	bhi.w	80055d6 <USBD_GetDescriptor+0x276>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <USBD_GetDescriptor+0x2c>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053a9 	.word	0x080053a9
 8005390:	080053c1 	.word	0x080053c1
 8005394:	08005401 	.word	0x08005401
 8005398:	080055d7 	.word	0x080055d7
 800539c:	080055d7 	.word	0x080055d7
 80053a0:	08005577 	.word	0x08005577
 80053a4:	080055a3 	.word	0x080055a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	7c12      	ldrb	r2, [r2, #16]
 80053b4:	f107 0108 	add.w	r1, r7, #8
 80053b8:	4610      	mov	r0, r2
 80053ba:	4798      	blx	r3
 80053bc:	60f8      	str	r0, [r7, #12]
      break;
 80053be:	e112      	b.n	80055e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7c1b      	ldrb	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10d      	bne.n	80053e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	f107 0208 	add.w	r2, r7, #8
 80053d4:	4610      	mov	r0, r2
 80053d6:	4798      	blx	r3
 80053d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3301      	adds	r3, #1
 80053de:	2202      	movs	r2, #2
 80053e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80053e2:	e100      	b.n	80055e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	f107 0208 	add.w	r2, r7, #8
 80053f0:	4610      	mov	r0, r2
 80053f2:	4798      	blx	r3
 80053f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3301      	adds	r3, #1
 80053fa:	2202      	movs	r2, #2
 80053fc:	701a      	strb	r2, [r3, #0]
      break;
 80053fe:	e0f2      	b.n	80055e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	885b      	ldrh	r3, [r3, #2]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b05      	cmp	r3, #5
 8005408:	f200 80ac 	bhi.w	8005564 <USBD_GetDescriptor+0x204>
 800540c:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <USBD_GetDescriptor+0xb4>)
 800540e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005412:	bf00      	nop
 8005414:	0800542d 	.word	0x0800542d
 8005418:	08005461 	.word	0x08005461
 800541c:	08005495 	.word	0x08005495
 8005420:	080054c9 	.word	0x080054c9
 8005424:	080054fd 	.word	0x080054fd
 8005428:	08005531 	.word	0x08005531
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00b      	beq.n	8005450 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	7c12      	ldrb	r2, [r2, #16]
 8005444:	f107 0108 	add.w	r1, r7, #8
 8005448:	4610      	mov	r0, r2
 800544a:	4798      	blx	r3
 800544c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800544e:	e091      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fa95 	bl	8005982 <USBD_CtlError>
            err++;
 8005458:	7afb      	ldrb	r3, [r7, #11]
 800545a:	3301      	adds	r3, #1
 800545c:	72fb      	strb	r3, [r7, #11]
          break;
 800545e:	e089      	b.n	8005574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	7c12      	ldrb	r2, [r2, #16]
 8005478:	f107 0108 	add.w	r1, r7, #8
 800547c:	4610      	mov	r0, r2
 800547e:	4798      	blx	r3
 8005480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005482:	e077      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa7b 	bl	8005982 <USBD_CtlError>
            err++;
 800548c:	7afb      	ldrb	r3, [r7, #11]
 800548e:	3301      	adds	r3, #1
 8005490:	72fb      	strb	r3, [r7, #11]
          break;
 8005492:	e06f      	b.n	8005574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	7c12      	ldrb	r2, [r2, #16]
 80054ac:	f107 0108 	add.w	r1, r7, #8
 80054b0:	4610      	mov	r0, r2
 80054b2:	4798      	blx	r3
 80054b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054b6:	e05d      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fa61 	bl	8005982 <USBD_CtlError>
            err++;
 80054c0:	7afb      	ldrb	r3, [r7, #11]
 80054c2:	3301      	adds	r3, #1
 80054c4:	72fb      	strb	r3, [r7, #11]
          break;
 80054c6:	e055      	b.n	8005574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00b      	beq.n	80054ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	7c12      	ldrb	r2, [r2, #16]
 80054e0:	f107 0108 	add.w	r1, r7, #8
 80054e4:	4610      	mov	r0, r2
 80054e6:	4798      	blx	r3
 80054e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054ea:	e043      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa47 	bl	8005982 <USBD_CtlError>
            err++;
 80054f4:	7afb      	ldrb	r3, [r7, #11]
 80054f6:	3301      	adds	r3, #1
 80054f8:	72fb      	strb	r3, [r7, #11]
          break;
 80054fa:	e03b      	b.n	8005574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	7c12      	ldrb	r2, [r2, #16]
 8005514:	f107 0108 	add.w	r1, r7, #8
 8005518:	4610      	mov	r0, r2
 800551a:	4798      	blx	r3
 800551c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800551e:	e029      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fa2d 	bl	8005982 <USBD_CtlError>
            err++;
 8005528:	7afb      	ldrb	r3, [r7, #11]
 800552a:	3301      	adds	r3, #1
 800552c:	72fb      	strb	r3, [r7, #11]
          break;
 800552e:	e021      	b.n	8005574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00b      	beq.n	8005554 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	7c12      	ldrb	r2, [r2, #16]
 8005548:	f107 0108 	add.w	r1, r7, #8
 800554c:	4610      	mov	r0, r2
 800554e:	4798      	blx	r3
 8005550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005552:	e00f      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fa13 	bl	8005982 <USBD_CtlError>
            err++;
 800555c:	7afb      	ldrb	r3, [r7, #11]
 800555e:	3301      	adds	r3, #1
 8005560:	72fb      	strb	r3, [r7, #11]
          break;
 8005562:	e007      	b.n	8005574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa0b 	bl	8005982 <USBD_CtlError>
          err++;
 800556c:	7afb      	ldrb	r3, [r7, #11]
 800556e:	3301      	adds	r3, #1
 8005570:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005572:	e038      	b.n	80055e6 <USBD_GetDescriptor+0x286>
 8005574:	e037      	b.n	80055e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	7c1b      	ldrb	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005586:	f107 0208 	add.w	r2, r7, #8
 800558a:	4610      	mov	r0, r2
 800558c:	4798      	blx	r3
 800558e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005590:	e029      	b.n	80055e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f9f4 	bl	8005982 <USBD_CtlError>
        err++;
 800559a:	7afb      	ldrb	r3, [r7, #11]
 800559c:	3301      	adds	r3, #1
 800559e:	72fb      	strb	r3, [r7, #11]
      break;
 80055a0:	e021      	b.n	80055e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	7c1b      	ldrb	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10d      	bne.n	80055c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	f107 0208 	add.w	r2, r7, #8
 80055b6:	4610      	mov	r0, r2
 80055b8:	4798      	blx	r3
 80055ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	2207      	movs	r2, #7
 80055c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80055c4:	e00f      	b.n	80055e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f9da 	bl	8005982 <USBD_CtlError>
        err++;
 80055ce:	7afb      	ldrb	r3, [r7, #11]
 80055d0:	3301      	adds	r3, #1
 80055d2:	72fb      	strb	r3, [r7, #11]
      break;
 80055d4:	e007      	b.n	80055e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f9d2 	bl	8005982 <USBD_CtlError>
      err++;
 80055de:	7afb      	ldrb	r3, [r7, #11]
 80055e0:	3301      	adds	r3, #1
 80055e2:	72fb      	strb	r3, [r7, #11]
      break;
 80055e4:	bf00      	nop
  }

  if (err != 0U)
 80055e6:	7afb      	ldrb	r3, [r7, #11]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11c      	bne.n	8005626 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80055ec:	893b      	ldrh	r3, [r7, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d011      	beq.n	8005616 <USBD_GetDescriptor+0x2b6>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	88db      	ldrh	r3, [r3, #6]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00d      	beq.n	8005616 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	88da      	ldrh	r2, [r3, #6]
 80055fe:	893b      	ldrh	r3, [r7, #8]
 8005600:	4293      	cmp	r3, r2
 8005602:	bf28      	it	cs
 8005604:	4613      	movcs	r3, r2
 8005606:	b29b      	uxth	r3, r3
 8005608:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800560a:	893b      	ldrh	r3, [r7, #8]
 800560c:	461a      	mov	r2, r3
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fa21 	bl	8005a58 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	88db      	ldrh	r3, [r3, #6]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa78 	bl	8005b14 <USBD_CtlSendStatus>
 8005624:	e000      	b.n	8005628 <USBD_GetDescriptor+0x2c8>
    return;
 8005626:	bf00      	nop
    }
  }
}
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop

08005630 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	889b      	ldrh	r3, [r3, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d130      	bne.n	80056a4 <USBD_SetAddress+0x74>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	88db      	ldrh	r3, [r3, #6]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d12c      	bne.n	80056a4 <USBD_SetAddress+0x74>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	885b      	ldrh	r3, [r3, #2]
 800564e:	2b7f      	cmp	r3, #127	; 0x7f
 8005650:	d828      	bhi.n	80056a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	885b      	ldrh	r3, [r3, #2]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005664:	2b03      	cmp	r3, #3
 8005666:	d104      	bne.n	8005672 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f989 	bl	8005982 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005670:	e01c      	b.n	80056ac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	7bfa      	ldrb	r2, [r7, #15]
 8005676:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	4619      	mov	r1, r3
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 ff64 	bl	800654c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fa45 	bl	8005b14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005698:	e008      	b.n	80056ac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056a2:	e003      	b.n	80056ac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80056a4:	6839      	ldr	r1, [r7, #0]
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f96b 	bl	8005982 <USBD_CtlError>
  }
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	885b      	ldrh	r3, [r3, #2]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	4b41      	ldr	r3, [pc, #260]	; (80057cc <USBD_SetConfig+0x118>)
 80056c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80056c8:	4b40      	ldr	r3, [pc, #256]	; (80057cc <USBD_SetConfig+0x118>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d904      	bls.n	80056da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80056d0:	6839      	ldr	r1, [r7, #0]
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f955 	bl	8005982 <USBD_CtlError>
 80056d8:	e075      	b.n	80057c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d002      	beq.n	80056ea <USBD_SetConfig+0x36>
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d023      	beq.n	8005730 <USBD_SetConfig+0x7c>
 80056e8:	e062      	b.n	80057b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80056ea:	4b38      	ldr	r3, [pc, #224]	; (80057cc <USBD_SetConfig+0x118>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01a      	beq.n	8005728 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80056f2:	4b36      	ldr	r3, [pc, #216]	; (80057cc <USBD_SetConfig+0x118>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2203      	movs	r2, #3
 8005700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005704:	4b31      	ldr	r3, [pc, #196]	; (80057cc <USBD_SetConfig+0x118>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff f9f1 	bl	8004af2 <USBD_SetClassConfig>
 8005710:	4603      	mov	r3, r0
 8005712:	2b02      	cmp	r3, #2
 8005714:	d104      	bne.n	8005720 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f932 	bl	8005982 <USBD_CtlError>
            return;
 800571e:	e052      	b.n	80057c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f9f7 	bl	8005b14 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005726:	e04e      	b.n	80057c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f9f3 	bl	8005b14 <USBD_CtlSendStatus>
        break;
 800572e:	e04a      	b.n	80057c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005730:	4b26      	ldr	r3, [pc, #152]	; (80057cc <USBD_SetConfig+0x118>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d112      	bne.n	800575e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005740:	4b22      	ldr	r3, [pc, #136]	; (80057cc <USBD_SetConfig+0x118>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800574a:	4b20      	ldr	r3, [pc, #128]	; (80057cc <USBD_SetConfig+0x118>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	4619      	mov	r1, r3
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff f9ed 	bl	8004b30 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f9dc 	bl	8005b14 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800575c:	e033      	b.n	80057c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800575e:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <USBD_SetConfig+0x118>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	d01d      	beq.n	80057a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff f9db 	bl	8004b30 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800577a:	4b14      	ldr	r3, [pc, #80]	; (80057cc <USBD_SetConfig+0x118>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005784:	4b11      	ldr	r3, [pc, #68]	; (80057cc <USBD_SetConfig+0x118>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff f9b1 	bl	8004af2 <USBD_SetClassConfig>
 8005790:	4603      	mov	r3, r0
 8005792:	2b02      	cmp	r3, #2
 8005794:	d104      	bne.n	80057a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f8f2 	bl	8005982 <USBD_CtlError>
            return;
 800579e:	e012      	b.n	80057c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f9b7 	bl	8005b14 <USBD_CtlSendStatus>
        break;
 80057a6:	e00e      	b.n	80057c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f9b3 	bl	8005b14 <USBD_CtlSendStatus>
        break;
 80057ae:	e00a      	b.n	80057c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8e5 	bl	8005982 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80057b8:	4b04      	ldr	r3, [pc, #16]	; (80057cc <USBD_SetConfig+0x118>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff f9b6 	bl	8004b30 <USBD_ClrClassConfig>
        break;
 80057c4:	bf00      	nop
    }
  }
}
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	20000198 	.word	0x20000198

080057d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	88db      	ldrh	r3, [r3, #6]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d004      	beq.n	80057ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f8cc 	bl	8005982 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80057ea:	e021      	b.n	8005830 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	db17      	blt.n	8005826 <USBD_GetConfig+0x56>
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	dd02      	ble.n	8005800 <USBD_GetConfig+0x30>
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d00b      	beq.n	8005816 <USBD_GetConfig+0x46>
 80057fe:	e012      	b.n	8005826 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3308      	adds	r3, #8
 800580a:	2201      	movs	r2, #1
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f922 	bl	8005a58 <USBD_CtlSendData>
        break;
 8005814:	e00c      	b.n	8005830 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3304      	adds	r3, #4
 800581a:	2201      	movs	r2, #1
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f91a 	bl	8005a58 <USBD_CtlSendData>
        break;
 8005824:	e004      	b.n	8005830 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005826:	6839      	ldr	r1, [r7, #0]
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f8aa 	bl	8005982 <USBD_CtlError>
        break;
 800582e:	bf00      	nop
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005848:	3b01      	subs	r3, #1
 800584a:	2b02      	cmp	r3, #2
 800584c:	d81e      	bhi.n	800588c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	88db      	ldrh	r3, [r3, #6]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d004      	beq.n	8005860 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005856:	6839      	ldr	r1, [r7, #0]
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f892 	bl	8005982 <USBD_CtlError>
        break;
 800585e:	e01a      	b.n	8005896 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f043 0202 	orr.w	r2, r3, #2
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	330c      	adds	r3, #12
 8005880:	2202      	movs	r2, #2
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f8e7 	bl	8005a58 <USBD_CtlSendData>
      break;
 800588a:	e004      	b.n	8005896 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f877 	bl	8005982 <USBD_CtlError>
      break;
 8005894:	bf00      	nop
  }
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	885b      	ldrh	r3, [r3, #2]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d106      	bne.n	80058be <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f92b 	bl	8005b14 <USBD_CtlSendStatus>
  }
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058d6:	3b01      	subs	r3, #1
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d80b      	bhi.n	80058f4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	885b      	ldrh	r3, [r3, #2]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d10c      	bne.n	80058fe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f911 	bl	8005b14 <USBD_CtlSendStatus>
      }
      break;
 80058f2:	e004      	b.n	80058fe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f843 	bl	8005982 <USBD_CtlError>
      break;
 80058fc:	e000      	b.n	8005900 <USBD_ClrFeature+0x3a>
      break;
 80058fe:	bf00      	nop
  }
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	785a      	ldrb	r2, [r3, #1]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	3302      	adds	r3, #2
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	b29a      	uxth	r2, r3
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	3303      	adds	r3, #3
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	b29b      	uxth	r3, r3
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	b29b      	uxth	r3, r3
 8005936:	4413      	add	r3, r2
 8005938:	b29a      	uxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	3304      	adds	r3, #4
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b29a      	uxth	r2, r3
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	3305      	adds	r3, #5
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	b29b      	uxth	r3, r3
 8005952:	4413      	add	r3, r2
 8005954:	b29a      	uxth	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	3306      	adds	r3, #6
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	b29a      	uxth	r2, r3
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	3307      	adds	r3, #7
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	b29b      	uxth	r3, r3
 800596e:	4413      	add	r3, r2
 8005970:	b29a      	uxth	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	80da      	strh	r2, [r3, #6]

}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800598c:	2180      	movs	r1, #128	; 0x80
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fd78 	bl	8006484 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005994:	2100      	movs	r1, #0
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fd74 	bl	8006484 <USBD_LL_StallEP>
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d032      	beq.n	8005a20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f834 	bl	8005a28 <USBD_GetLen>
 80059c0:	4603      	mov	r3, r0
 80059c2:	3301      	adds	r3, #1
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	75fa      	strb	r2, [r7, #23]
 80059d4:	461a      	mov	r2, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4413      	add	r3, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	7812      	ldrb	r2, [r2, #0]
 80059de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	75fa      	strb	r2, [r7, #23]
 80059e6:	461a      	mov	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4413      	add	r3, r2
 80059ec:	2203      	movs	r2, #3
 80059ee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80059f0:	e012      	b.n	8005a18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	60fa      	str	r2, [r7, #12]
 80059f8:	7dfa      	ldrb	r2, [r7, #23]
 80059fa:	1c51      	adds	r1, r2, #1
 80059fc:	75f9      	strb	r1, [r7, #23]
 80059fe:	4611      	mov	r1, r2
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	440a      	add	r2, r1
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	75fa      	strb	r2, [r7, #23]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4413      	add	r3, r2
 8005a14:	2200      	movs	r2, #0
 8005a16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e8      	bne.n	80059f2 <USBD_GetString+0x4e>
    }
  }
}
 8005a20:	bf00      	nop
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005a34:	e005      	b.n	8005a42 <USBD_GetLen+0x1a>
  {
    len++;
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f5      	bne.n	8005a36 <USBD_GetLen+0xe>
  }

  return len;
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005a6e:	88fa      	ldrh	r2, [r7, #6]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005a74:	88fa      	ldrh	r2, [r7, #6]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	2100      	movs	r1, #0
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 fd82 	bl	800658a <USBD_LL_Transmit>

  return USBD_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 fd70 	bl	800658a <USBD_LL_Transmit>

  return USBD_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	2100      	movs	r1, #0
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fd75 	bl	80065d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	2100      	movs	r1, #0
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fd63 	bl	80065d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2204      	movs	r2, #4
 8005b20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005b24:	2300      	movs	r3, #0
 8005b26:	2200      	movs	r2, #0
 8005b28:	2100      	movs	r1, #0
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fd2d 	bl	800658a <USBD_LL_Transmit>

  return USBD_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2205      	movs	r2, #5
 8005b46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2100      	movs	r1, #0
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fd3d 	bl	80065d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b64:	f7fa fb38 	bl	80001d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b68:	f000 f810 	bl	8005b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b6c:	f000 f89a 	bl	8005ca4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005b70:	f000 f868 	bl	8005c44 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8005b74:	f000 f9fc 	bl	8005f70 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  debugPrintln(&huart2,"LED ON/OFF Project");
 8005b78:	4902      	ldr	r1, [pc, #8]	; (8005b84 <main+0x24>)
 8005b7a:	4803      	ldr	r0, [pc, #12]	; (8005b88 <main+0x28>)
 8005b7c:	f000 f8fc 	bl	8005d78 <debugPrintln>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005b80:	e7fe      	b.n	8005b80 <main+0x20>
 8005b82:	bf00      	nop
 8005b84:	080069bc 	.word	0x080069bc
 8005b88:	200003c0 	.word	0x200003c0

08005b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b09c      	sub	sp, #112	; 0x70
 8005b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005b96:	2228      	movs	r2, #40	; 0x28
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fefa 	bl	8006994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ba0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	605a      	str	r2, [r3, #4]
 8005baa:	609a      	str	r2, [r3, #8]
 8005bac:	60da      	str	r2, [r3, #12]
 8005bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005bb0:	463b      	mov	r3, r7
 8005bb2:	2234      	movs	r2, #52	; 0x34
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 feec 	bl	8006994 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005bc0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bd6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8005bd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005bde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fb fc9c 	bl	8001520 <HAL_RCC_OscConfig>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8005bee:	f000 f903 	bl	8005df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005bf2:	230f      	movs	r3, #15
 8005bf4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005c04:	2300      	movs	r3, #0
 8005c06:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005c08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fc fb8e 	bl	8002330 <HAL_RCC_ClockConfig>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005c1a:	f000 f8ed 	bl	8005df8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c22:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8005c24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c28:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fc fdb5 	bl	800279c <HAL_RCCEx_PeriphCLKConfig>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005c38:	f000 f8de 	bl	8005df8 <Error_Handler>
  }
}
 8005c3c:	bf00      	nop
 8005c3e:	3770      	adds	r7, #112	; 0x70
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005c48:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <MX_USART2_UART_Init+0x58>)
 8005c4a:	4a15      	ldr	r2, [pc, #84]	; (8005ca0 <MX_USART2_UART_Init+0x5c>)
 8005c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <MX_USART2_UART_Init+0x58>)
 8005c50:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c56:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <MX_USART2_UART_Init+0x58>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005c5c:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <MX_USART2_UART_Init+0x58>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005c62:	4b0e      	ldr	r3, [pc, #56]	; (8005c9c <MX_USART2_UART_Init+0x58>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <MX_USART2_UART_Init+0x58>)
 8005c6a:	220c      	movs	r2, #12
 8005c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <MX_USART2_UART_Init+0x58>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c74:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <MX_USART2_UART_Init+0x58>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c7a:	4b08      	ldr	r3, [pc, #32]	; (8005c9c <MX_USART2_UART_Init+0x58>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c80:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <MX_USART2_UART_Init+0x58>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c86:	4805      	ldr	r0, [pc, #20]	; (8005c9c <MX_USART2_UART_Init+0x58>)
 8005c88:	f7fc ff1a 	bl	8002ac0 <HAL_UART_Init>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005c92:	f000 f8b1 	bl	8005df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c96:	bf00      	nop
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200003c0 	.word	0x200003c0
 8005ca0:	40004400 	.word	0x40004400

08005ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08a      	sub	sp, #40	; 0x28
 8005ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005caa:	f107 0314 	add.w	r3, r7, #20
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	605a      	str	r2, [r3, #4]
 8005cb4:	609a      	str	r2, [r3, #8]
 8005cb6:	60da      	str	r2, [r3, #12]
 8005cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cba:	4b2b      	ldr	r3, [pc, #172]	; (8005d68 <MX_GPIO_Init+0xc4>)
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	4a2a      	ldr	r2, [pc, #168]	; (8005d68 <MX_GPIO_Init+0xc4>)
 8005cc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cc4:	6153      	str	r3, [r2, #20]
 8005cc6:	4b28      	ldr	r3, [pc, #160]	; (8005d68 <MX_GPIO_Init+0xc4>)
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cce:	613b      	str	r3, [r7, #16]
 8005cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005cd2:	4b25      	ldr	r3, [pc, #148]	; (8005d68 <MX_GPIO_Init+0xc4>)
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	4a24      	ldr	r2, [pc, #144]	; (8005d68 <MX_GPIO_Init+0xc4>)
 8005cd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cdc:	6153      	str	r3, [r2, #20]
 8005cde:	4b22      	ldr	r3, [pc, #136]	; (8005d68 <MX_GPIO_Init+0xc4>)
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cea:	4b1f      	ldr	r3, [pc, #124]	; (8005d68 <MX_GPIO_Init+0xc4>)
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	4a1e      	ldr	r2, [pc, #120]	; (8005d68 <MX_GPIO_Init+0xc4>)
 8005cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf4:	6153      	str	r3, [r2, #20]
 8005cf6:	4b1c      	ldr	r3, [pc, #112]	; (8005d68 <MX_GPIO_Init+0xc4>)
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfe:	60bb      	str	r3, [r7, #8]
 8005d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d02:	4b19      	ldr	r3, [pc, #100]	; (8005d68 <MX_GPIO_Init+0xc4>)
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <MX_GPIO_Init+0xc4>)
 8005d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d0c:	6153      	str	r3, [r2, #20]
 8005d0e:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <MX_GPIO_Init+0xc4>)
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d16:	607b      	str	r3, [r7, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d20:	4812      	ldr	r0, [pc, #72]	; (8005d6c <MX_GPIO_Init+0xc8>)
 8005d22:	f7fa fd43 	bl	80007ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <MX_GPIO_Init+0xcc>)
 8005d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005d34:	f107 0314 	add.w	r3, r7, #20
 8005d38:	4619      	mov	r1, r3
 8005d3a:	480e      	ldr	r0, [pc, #56]	; (8005d74 <MX_GPIO_Init+0xd0>)
 8005d3c:	f7fa fbc4 	bl	80004c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8005d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d46:	2301      	movs	r3, #1
 8005d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005d52:	f107 0314 	add.w	r3, r7, #20
 8005d56:	4619      	mov	r1, r3
 8005d58:	4804      	ldr	r0, [pc, #16]	; (8005d6c <MX_GPIO_Init+0xc8>)
 8005d5a:	f7fa fbb5 	bl	80004c8 <HAL_GPIO_Init>

}
 8005d5e:	bf00      	nop
 8005d60:	3728      	adds	r7, #40	; 0x28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	48000400 	.word	0x48000400
 8005d70:	10210000 	.word	0x10210000
 8005d74:	48000800 	.word	0x48000800

08005d78 <debugPrintln>:

/* USER CODE BEGIN 4 */
void debugPrintln(UART_HandleTypeDef *huart, char _out[])
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 0xFFFFFF);
 8005d82:	6838      	ldr	r0, [r7, #0]
 8005d84:	f7fa fa20 	bl	80001c8 <strlen>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fc fee2 	bl	8002b5c <HAL_UART_Transmit>
	//On ajoute un saut de ligne
	char newline[2] = "\r\n";
 8005d98:	f640 230d 	movw	r3, #2573	; 0xa0d
 8005d9c:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 100);
 8005d9e:	f107 010c 	add.w	r1, r7, #12
 8005da2:	2364      	movs	r3, #100	; 0x64
 8005da4:	2202      	movs	r2, #2
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fc fed8 	bl	8002b5c <HAL_UART_Transmit>
}
 8005dac:	bf00      	nop
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <processLED>:

void processLED(uint8_t Buf)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState LED = (!Buf)?GPIO_PIN_RESET:GPIO_PIN_SET;
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	bf14      	ite	ne
 8005dc4:	2301      	movne	r3, #1
 8005dc6:	2300      	moveq	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, LED);
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dd4:	4805      	ldr	r0, [pc, #20]	; (8005dec <processLED+0x38>)
 8005dd6:	f7fa fce9 	bl	80007ac <HAL_GPIO_WritePin>
	debugPrintln(&huart2,"LED changed");
 8005dda:	4905      	ldr	r1, [pc, #20]	; (8005df0 <processLED+0x3c>)
 8005ddc:	4805      	ldr	r0, [pc, #20]	; (8005df4 <processLED+0x40>)
 8005dde:	f7ff ffcb 	bl	8005d78 <debugPrintln>
}
 8005de2:	bf00      	nop
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	48000400 	.word	0x48000400
 8005df0:	080069d0 	.word	0x080069d0
 8005df4:	200003c0 	.word	0x200003c0

08005df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005dfc:	bf00      	nop
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e0e:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <HAL_MspInit+0x44>)
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	4a0e      	ldr	r2, [pc, #56]	; (8005e4c <HAL_MspInit+0x44>)
 8005e14:	f043 0301 	orr.w	r3, r3, #1
 8005e18:	6193      	str	r3, [r2, #24]
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <HAL_MspInit+0x44>)
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	607b      	str	r3, [r7, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e26:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <HAL_MspInit+0x44>)
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	4a08      	ldr	r2, [pc, #32]	; (8005e4c <HAL_MspInit+0x44>)
 8005e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e30:	61d3      	str	r3, [r2, #28]
 8005e32:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <HAL_MspInit+0x44>)
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005e3e:	2007      	movs	r0, #7
 8005e40:	f7fa fb00 	bl	8000444 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e44:	bf00      	nop
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40021000 	.word	0x40021000

08005e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08a      	sub	sp, #40	; 0x28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e58:	f107 0314 	add.w	r3, r7, #20
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	609a      	str	r2, [r3, #8]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a17      	ldr	r2, [pc, #92]	; (8005ecc <HAL_UART_MspInit+0x7c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d128      	bne.n	8005ec4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e72:	4b17      	ldr	r3, [pc, #92]	; (8005ed0 <HAL_UART_MspInit+0x80>)
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	4a16      	ldr	r2, [pc, #88]	; (8005ed0 <HAL_UART_MspInit+0x80>)
 8005e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e7c:	61d3      	str	r3, [r2, #28]
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <HAL_UART_MspInit+0x80>)
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e8a:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <HAL_UART_MspInit+0x80>)
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	4a10      	ldr	r2, [pc, #64]	; (8005ed0 <HAL_UART_MspInit+0x80>)
 8005e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e94:	6153      	str	r3, [r2, #20]
 8005e96:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <HAL_UART_MspInit+0x80>)
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005ea2:	230c      	movs	r3, #12
 8005ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005eb2:	2307      	movs	r3, #7
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eb6:	f107 0314 	add.w	r3, r7, #20
 8005eba:	4619      	mov	r1, r3
 8005ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ec0:	f7fa fb02 	bl	80004c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005ec4:	bf00      	nop
 8005ec6:	3728      	adds	r7, #40	; 0x28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40004400 	.word	0x40004400
 8005ed0:	40021000 	.word	0x40021000

08005ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005ed8:	bf00      	nop
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ee6:	e7fe      	b.n	8005ee6 <HardFault_Handler+0x4>

08005ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005eec:	e7fe      	b.n	8005eec <MemManage_Handler+0x4>

08005eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ef2:	e7fe      	b.n	8005ef2 <BusFault_Handler+0x4>

08005ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ef8:	e7fe      	b.n	8005ef8 <UsageFault_Handler+0x4>

08005efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005efa:	b480      	push	{r7}
 8005efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005efe:	bf00      	nop
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f0c:	bf00      	nop
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f16:	b480      	push	{r7}
 8005f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f1a:	bf00      	nop
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f28:	f7fa f99c 	bl	8000264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f2c:	bf00      	nop
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005f34:	4802      	ldr	r0, [pc, #8]	; (8005f40 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8005f36:	f7fa fd2b 	bl	8000990 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8005f3a:	bf00      	nop
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000edc 	.word	0x20000edc

08005f44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f48:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <SystemInit+0x28>)
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4e:	4a07      	ldr	r2, [pc, #28]	; (8005f6c <SystemInit+0x28>)
 8005f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005f58:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <SystemInit+0x28>)
 8005f5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f5e:	609a      	str	r2, [r3, #8]
#endif
}
 8005f60:	bf00      	nop
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005f74:	2200      	movs	r2, #0
 8005f76:	4912      	ldr	r1, [pc, #72]	; (8005fc0 <MX_USB_DEVICE_Init+0x50>)
 8005f78:	4812      	ldr	r0, [pc, #72]	; (8005fc4 <MX_USB_DEVICE_Init+0x54>)
 8005f7a:	f7fe fd5e 	bl	8004a3a <USBD_Init>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005f84:	f7ff ff38 	bl	8005df8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005f88:	490f      	ldr	r1, [pc, #60]	; (8005fc8 <MX_USB_DEVICE_Init+0x58>)
 8005f8a:	480e      	ldr	r0, [pc, #56]	; (8005fc4 <MX_USB_DEVICE_Init+0x54>)
 8005f8c:	f7fe fd80 	bl	8004a90 <USBD_RegisterClass>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005f96:	f7ff ff2f 	bl	8005df8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005f9a:	490c      	ldr	r1, [pc, #48]	; (8005fcc <MX_USB_DEVICE_Init+0x5c>)
 8005f9c:	4809      	ldr	r0, [pc, #36]	; (8005fc4 <MX_USB_DEVICE_Init+0x54>)
 8005f9e:	f7fe fcdd 	bl	800495c <USBD_CDC_RegisterInterface>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005fa8:	f7ff ff26 	bl	8005df8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005fac:	4805      	ldr	r0, [pc, #20]	; (8005fc4 <MX_USB_DEVICE_Init+0x54>)
 8005fae:	f7fe fd89 	bl	8004ac4 <USBD_Start>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005fb8:	f7ff ff1e 	bl	8005df8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005fbc:	bf00      	nop
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	2000012c 	.word	0x2000012c
 8005fc4:	20000440 	.word	0x20000440
 8005fc8:	20000014 	.word	0x20000014
 8005fcc:	2000011c 	.word	0x2000011c

08005fd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4905      	ldr	r1, [pc, #20]	; (8005fec <CDC_Init_FS+0x1c>)
 8005fd8:	4805      	ldr	r0, [pc, #20]	; (8005ff0 <CDC_Init_FS+0x20>)
 8005fda:	f7fe fcd6 	bl	800498a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005fde:	4905      	ldr	r1, [pc, #20]	; (8005ff4 <CDC_Init_FS+0x24>)
 8005fe0:	4803      	ldr	r0, [pc, #12]	; (8005ff0 <CDC_Init_FS+0x20>)
 8005fe2:	f7fe fcec 	bl	80049be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005fe6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20000aec 	.word	0x20000aec
 8005ff0:	20000440 	.word	0x20000440
 8005ff4:	20000704 	.word	0x20000704

08005ff8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005ffc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	6039      	str	r1, [r7, #0]
 8006012:	71fb      	strb	r3, [r7, #7]
 8006014:	4613      	mov	r3, r2
 8006016:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	2b23      	cmp	r3, #35	; 0x23
 800601c:	f200 808c 	bhi.w	8006138 <CDC_Control_FS+0x130>
 8006020:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <CDC_Control_FS+0x20>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	08006139 	.word	0x08006139
 800602c:	08006139 	.word	0x08006139
 8006030:	08006139 	.word	0x08006139
 8006034:	08006139 	.word	0x08006139
 8006038:	08006139 	.word	0x08006139
 800603c:	08006139 	.word	0x08006139
 8006040:	08006139 	.word	0x08006139
 8006044:	08006139 	.word	0x08006139
 8006048:	08006139 	.word	0x08006139
 800604c:	08006139 	.word	0x08006139
 8006050:	08006139 	.word	0x08006139
 8006054:	08006139 	.word	0x08006139
 8006058:	08006139 	.word	0x08006139
 800605c:	08006139 	.word	0x08006139
 8006060:	08006139 	.word	0x08006139
 8006064:	08006139 	.word	0x08006139
 8006068:	08006139 	.word	0x08006139
 800606c:	08006139 	.word	0x08006139
 8006070:	08006139 	.word	0x08006139
 8006074:	08006139 	.word	0x08006139
 8006078:	08006139 	.word	0x08006139
 800607c:	08006139 	.word	0x08006139
 8006080:	08006139 	.word	0x08006139
 8006084:	08006139 	.word	0x08006139
 8006088:	08006139 	.word	0x08006139
 800608c:	08006139 	.word	0x08006139
 8006090:	08006139 	.word	0x08006139
 8006094:	08006139 	.word	0x08006139
 8006098:	08006139 	.word	0x08006139
 800609c:	08006139 	.word	0x08006139
 80060a0:	08006139 	.word	0x08006139
 80060a4:	08006139 	.word	0x08006139
 80060a8:	080060b9 	.word	0x080060b9
 80060ac:	080060f3 	.word	0x080060f3
 80060b0:	08006139 	.word	0x08006139
 80060b4:	08006139 	.word	0x08006139
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0]=pbuf[0];		//On memorise ce qui vient d'etre envoyé par l'host
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781a      	ldrb	r2, [r3, #0]
 80060bc:	4b22      	ldr	r3, [pc, #136]	; (8006148 <CDC_Control_FS+0x140>)
 80060be:	701a      	strb	r2, [r3, #0]
    	buffer[1]=pbuf[1];
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	785a      	ldrb	r2, [r3, #1]
 80060c4:	4b20      	ldr	r3, [pc, #128]	; (8006148 <CDC_Control_FS+0x140>)
 80060c6:	705a      	strb	r2, [r3, #1]
    	buffer[2]=pbuf[2];
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	789a      	ldrb	r2, [r3, #2]
 80060cc:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <CDC_Control_FS+0x140>)
 80060ce:	709a      	strb	r2, [r3, #2]
    	buffer[3]=pbuf[3];
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	78da      	ldrb	r2, [r3, #3]
 80060d4:	4b1c      	ldr	r3, [pc, #112]	; (8006148 <CDC_Control_FS+0x140>)
 80060d6:	70da      	strb	r2, [r3, #3]
    	buffer[4]=pbuf[4];
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	791a      	ldrb	r2, [r3, #4]
 80060dc:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <CDC_Control_FS+0x140>)
 80060de:	711a      	strb	r2, [r3, #4]
    	buffer[5]=pbuf[5];
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	795a      	ldrb	r2, [r3, #5]
 80060e4:	4b18      	ldr	r3, [pc, #96]	; (8006148 <CDC_Control_FS+0x140>)
 80060e6:	715a      	strb	r2, [r3, #5]
    	buffer[6]=pbuf[6];
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	799a      	ldrb	r2, [r3, #6]
 80060ec:	4b16      	ldr	r3, [pc, #88]	; (8006148 <CDC_Control_FS+0x140>)
 80060ee:	719a      	strb	r2, [r3, #6]
    break;
 80060f0:	e023      	b.n	800613a <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0]=buffer[0];
 80060f2:	4b15      	ldr	r3, [pc, #84]	; (8006148 <CDC_Control_FS+0x140>)
 80060f4:	781a      	ldrb	r2, [r3, #0]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	701a      	strb	r2, [r3, #0]
    	pbuf[1]=buffer[1];
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	3301      	adds	r3, #1
 80060fe:	4a12      	ldr	r2, [pc, #72]	; (8006148 <CDC_Control_FS+0x140>)
 8006100:	7852      	ldrb	r2, [r2, #1]
 8006102:	701a      	strb	r2, [r3, #0]
    	pbuf[2]=buffer[2];
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	3302      	adds	r3, #2
 8006108:	4a0f      	ldr	r2, [pc, #60]	; (8006148 <CDC_Control_FS+0x140>)
 800610a:	7892      	ldrb	r2, [r2, #2]
 800610c:	701a      	strb	r2, [r3, #0]
    	pbuf[3]=buffer[3];
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	3303      	adds	r3, #3
 8006112:	4a0d      	ldr	r2, [pc, #52]	; (8006148 <CDC_Control_FS+0x140>)
 8006114:	78d2      	ldrb	r2, [r2, #3]
 8006116:	701a      	strb	r2, [r3, #0]
    	pbuf[4]=buffer[4];
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	3304      	adds	r3, #4
 800611c:	4a0a      	ldr	r2, [pc, #40]	; (8006148 <CDC_Control_FS+0x140>)
 800611e:	7912      	ldrb	r2, [r2, #4]
 8006120:	701a      	strb	r2, [r3, #0]
    	pbuf[5]=buffer[5];
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	3305      	adds	r3, #5
 8006126:	4a08      	ldr	r2, [pc, #32]	; (8006148 <CDC_Control_FS+0x140>)
 8006128:	7952      	ldrb	r2, [r2, #5]
 800612a:	701a      	strb	r2, [r3, #0]
    	pbuf[6]=buffer[6];
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	3306      	adds	r3, #6
 8006130:	4a05      	ldr	r2, [pc, #20]	; (8006148 <CDC_Control_FS+0x140>)
 8006132:	7992      	ldrb	r2, [r2, #6]
 8006134:	701a      	strb	r2, [r3, #0]
    break;
 8006136:	e000      	b.n	800613a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006138:	bf00      	nop
  }

  return (USBD_OK);
 800613a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	20000ed4 	.word	0x20000ed4

0800614c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	480c      	ldr	r0, [pc, #48]	; (800618c <CDC_Receive_FS+0x40>)
 800615a:	f7fe fc30 	bl	80049be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800615e:	480b      	ldr	r0, [pc, #44]	; (800618c <CDC_Receive_FS+0x40>)
 8006160:	f7fe fc41 	bl	80049e6 <USBD_CDC_ReceivePacket>

  /* Transmet la variable reçue au main */
  if(*Len==1)	  	  	  	  //Recoit 0 ou 1
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d105      	bne.n	8006178 <CDC_Receive_FS+0x2c>
	  processLED(Buf[0]);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff fe1f 	bl	8005db4 <processLED>
 8006176:	e003      	b.n	8006180 <CDC_Receive_FS+0x34>
  else
	  debugPrintln(&huart2,"Erreur paquet recue");
 8006178:	4905      	ldr	r1, [pc, #20]	; (8006190 <CDC_Receive_FS+0x44>)
 800617a:	4806      	ldr	r0, [pc, #24]	; (8006194 <CDC_Receive_FS+0x48>)
 800617c:	f7ff fdfc 	bl	8005d78 <debugPrintln>

  return (USBD_OK);
 8006180:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000440 	.word	0x20000440
 8006190:	080069dc 	.word	0x080069dc
 8006194:	200003c0 	.word	0x200003c0

08006198 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a0d      	ldr	r2, [pc, #52]	; (80061dc <HAL_PCD_MspInit+0x44>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d113      	bne.n	80061d2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80061aa:	4b0d      	ldr	r3, [pc, #52]	; (80061e0 <HAL_PCD_MspInit+0x48>)
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	4a0c      	ldr	r2, [pc, #48]	; (80061e0 <HAL_PCD_MspInit+0x48>)
 80061b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80061b4:	61d3      	str	r3, [r2, #28]
 80061b6:	4b0a      	ldr	r3, [pc, #40]	; (80061e0 <HAL_PCD_MspInit+0x48>)
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80061c2:	2200      	movs	r2, #0
 80061c4:	2100      	movs	r1, #0
 80061c6:	2014      	movs	r0, #20
 80061c8:	f7fa f947 	bl	800045a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80061cc:	2014      	movs	r0, #20
 80061ce:	f7fa f960 	bl	8000492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80061d2:	bf00      	nop
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40005c00 	.word	0x40005c00
 80061e0:	40021000 	.word	0x40021000

080061e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80061f8:	4619      	mov	r1, r3
 80061fa:	4610      	mov	r0, r2
 80061fc:	f7fe fcab 	bl	8004b56 <USBD_LL_SetupStage>
}
 8006200:	bf00      	nop
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	015b      	lsls	r3, r3, #5
 8006220:	4413      	add	r3, r2
 8006222:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	4619      	mov	r1, r3
 800622c:	f7fe fcde 	bl	8004bec <USBD_LL_DataOutStage>
}
 8006230:	bf00      	nop
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	015b      	lsls	r3, r3, #5
 8006250:	4413      	add	r3, r2
 8006252:	333c      	adds	r3, #60	; 0x3c
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	4619      	mov	r1, r3
 800625a:	f7fe fd38 	bl	8004cce <USBD_LL_DataInStage>
}
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006274:	4618      	mov	r0, r3
 8006276:	f7fe fe4b 	bl	8004f10 <USBD_LL_SOF>
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800628a:	2301      	movs	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d001      	beq.n	800629a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006296:	f7ff fdaf 	bl	8005df8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80062a0:	7bfa      	ldrb	r2, [r7, #15]
 80062a2:	4611      	mov	r1, r2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe fdf8 	bl	8004e9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fe fdb1 	bl	8004e18 <USBD_LL_Reset>
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe fdf3 	bl	8004eba <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80062dc:	4b04      	ldr	r3, [pc, #16]	; (80062f0 <HAL_PCD_SuspendCallback+0x30>)
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	4a03      	ldr	r2, [pc, #12]	; (80062f0 <HAL_PCD_SuspendCallback+0x30>)
 80062e2:	f043 0306 	orr.w	r3, r3, #6
 80062e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80062e8:	bf00      	nop
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	e000ed00 	.word	0xe000ed00

080062f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fdee 	bl	8004ee4 <USBD_LL_Resume>
}
 8006308:	bf00      	nop
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006318:	4a28      	ldr	r2, [pc, #160]	; (80063bc <USBD_LL_Init+0xac>)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a26      	ldr	r2, [pc, #152]	; (80063bc <USBD_LL_Init+0xac>)
 8006324:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006328:	4b24      	ldr	r3, [pc, #144]	; (80063bc <USBD_LL_Init+0xac>)
 800632a:	4a25      	ldr	r2, [pc, #148]	; (80063c0 <USBD_LL_Init+0xb0>)
 800632c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800632e:	4b23      	ldr	r3, [pc, #140]	; (80063bc <USBD_LL_Init+0xac>)
 8006330:	2208      	movs	r2, #8
 8006332:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006334:	4b21      	ldr	r3, [pc, #132]	; (80063bc <USBD_LL_Init+0xac>)
 8006336:	2202      	movs	r2, #2
 8006338:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800633a:	4b20      	ldr	r3, [pc, #128]	; (80063bc <USBD_LL_Init+0xac>)
 800633c:	2202      	movs	r2, #2
 800633e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006340:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <USBD_LL_Init+0xac>)
 8006342:	2200      	movs	r2, #0
 8006344:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006346:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <USBD_LL_Init+0xac>)
 8006348:	2200      	movs	r2, #0
 800634a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800634c:	481b      	ldr	r0, [pc, #108]	; (80063bc <USBD_LL_Init+0xac>)
 800634e:	f7fa fa45 	bl	80007dc <HAL_PCD_Init>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006358:	f7ff fd4e 	bl	8005df8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006362:	2318      	movs	r3, #24
 8006364:	2200      	movs	r2, #0
 8006366:	2100      	movs	r1, #0
 8006368:	f7fb f89c 	bl	80014a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006372:	2358      	movs	r3, #88	; 0x58
 8006374:	2200      	movs	r2, #0
 8006376:	2180      	movs	r1, #128	; 0x80
 8006378:	f7fb f894 	bl	80014a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006382:	23c0      	movs	r3, #192	; 0xc0
 8006384:	2200      	movs	r2, #0
 8006386:	2181      	movs	r1, #129	; 0x81
 8006388:	f7fb f88c 	bl	80014a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006392:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006396:	2200      	movs	r2, #0
 8006398:	2101      	movs	r1, #1
 800639a:	f7fb f883 	bl	80014a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80063a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063a8:	2200      	movs	r2, #0
 80063aa:	2182      	movs	r1, #130	; 0x82
 80063ac:	f7fb f87a 	bl	80014a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000edc 	.word	0x20000edc
 80063c0:	40005c00 	.word	0x40005c00

080063c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fa fab2 	bl	8000944 <HAL_PCD_Start>
 80063e0:	4603      	mov	r3, r0
 80063e2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 f94c 	bl	8006684 <USBD_Get_USB_Status>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	4608      	mov	r0, r1
 8006404:	4611      	mov	r1, r2
 8006406:	461a      	mov	r2, r3
 8006408:	4603      	mov	r3, r0
 800640a:	70fb      	strb	r3, [r7, #3]
 800640c:	460b      	mov	r3, r1
 800640e:	70bb      	strb	r3, [r7, #2]
 8006410:	4613      	mov	r3, r2
 8006412:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006422:	78bb      	ldrb	r3, [r7, #2]
 8006424:	883a      	ldrh	r2, [r7, #0]
 8006426:	78f9      	ldrb	r1, [r7, #3]
 8006428:	f7fa fbd9 	bl	8000bde <HAL_PCD_EP_Open>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f926 	bl	8006684 <USBD_Get_USB_Status>
 8006438:	4603      	mov	r3, r0
 800643a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800643c:	7bbb      	ldrb	r3, [r7, #14]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006460:	78fa      	ldrb	r2, [r7, #3]
 8006462:	4611      	mov	r1, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f7fa fc1a 	bl	8000c9e <HAL_PCD_EP_Close>
 800646a:	4603      	mov	r3, r0
 800646c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	4618      	mov	r0, r3
 8006472:	f000 f907 	bl	8006684 <USBD_Get_USB_Status>
 8006476:	4603      	mov	r3, r0
 8006478:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800647a:	7bbb      	ldrb	r3, [r7, #14]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800649e:	78fa      	ldrb	r2, [r7, #3]
 80064a0:	4611      	mov	r1, r2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fa fcc5 	bl	8000e32 <HAL_PCD_EP_SetStall>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 f8e8 	bl	8006684 <USBD_Get_USB_Status>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	460b      	mov	r3, r1
 80064cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064dc:	78fa      	ldrb	r2, [r7, #3]
 80064de:	4611      	mov	r1, r2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fa fd00 	bl	8000ee6 <HAL_PCD_EP_ClrStall>
 80064e6:	4603      	mov	r3, r0
 80064e8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 f8c9 	bl	8006684 <USBD_Get_USB_Status>
 80064f2:	4603      	mov	r3, r0
 80064f4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006512:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006518:	2b00      	cmp	r3, #0
 800651a:	da08      	bge.n	800652e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	015b      	lsls	r3, r3, #5
 8006526:	4413      	add	r3, r2
 8006528:	332a      	adds	r3, #42	; 0x2a
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	e008      	b.n	8006540 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	015b      	lsls	r3, r3, #5
 8006538:	4413      	add	r3, r2
 800653a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800653e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006566:	78fa      	ldrb	r2, [r7, #3]
 8006568:	4611      	mov	r1, r2
 800656a:	4618      	mov	r0, r3
 800656c:	f7fa fb12 	bl	8000b94 <HAL_PCD_SetAddress>
 8006570:	4603      	mov	r3, r0
 8006572:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 f884 	bl	8006684 <USBD_Get_USB_Status>
 800657c:	4603      	mov	r3, r0
 800657e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006580:	7bbb      	ldrb	r3, [r7, #14]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b086      	sub	sp, #24
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	461a      	mov	r2, r3
 8006596:	460b      	mov	r3, r1
 8006598:	72fb      	strb	r3, [r7, #11]
 800659a:	4613      	mov	r3, r2
 800659c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80065ac:	893b      	ldrh	r3, [r7, #8]
 80065ae:	7af9      	ldrb	r1, [r7, #11]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	f7fa fc05 	bl	8000dc0 <HAL_PCD_EP_Transmit>
 80065b6:	4603      	mov	r3, r0
 80065b8:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 f861 	bl	8006684 <USBD_Get_USB_Status>
 80065c2:	4603      	mov	r3, r0
 80065c4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80065c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	461a      	mov	r2, r3
 80065dc:	460b      	mov	r3, r1
 80065de:	72fb      	strb	r3, [r7, #11]
 80065e0:	4613      	mov	r3, r2
 80065e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80065f2:	893b      	ldrh	r3, [r7, #8]
 80065f4:	7af9      	ldrb	r1, [r7, #11]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	f7fa fb93 	bl	8000d22 <HAL_PCD_EP_Receive>
 80065fc:	4603      	mov	r3, r0
 80065fe:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f83e 	bl	8006684 <USBD_Get_USB_Status>
 8006608:	4603      	mov	r3, r0
 800660a:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800660c:	7dbb      	ldrb	r3, [r7, #22]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006628:	78fa      	ldrb	r2, [r7, #3]
 800662a:	4611      	mov	r1, r2
 800662c:	4618      	mov	r0, r3
 800662e:	f7fa fbb2 	bl	8000d96 <HAL_PCD_EP_GetRxCount>
 8006632:	4603      	mov	r3, r0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006644:	4b03      	ldr	r3, [pc, #12]	; (8006654 <USBD_static_malloc+0x18>)
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	2000019c 	.word	0x2000019c

08006658 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]

}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	2b03      	cmp	r3, #3
 8006696:	d817      	bhi.n	80066c8 <USBD_Get_USB_Status+0x44>
 8006698:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <USBD_Get_USB_Status+0x1c>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	080066b1 	.word	0x080066b1
 80066a4:	080066b7 	.word	0x080066b7
 80066a8:	080066bd 	.word	0x080066bd
 80066ac:	080066c3 	.word	0x080066c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	73fb      	strb	r3, [r7, #15]
    break;
 80066b4:	e00b      	b.n	80066ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80066b6:	2302      	movs	r3, #2
 80066b8:	73fb      	strb	r3, [r7, #15]
    break;
 80066ba:	e008      	b.n	80066ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80066bc:	2301      	movs	r3, #1
 80066be:	73fb      	strb	r3, [r7, #15]
    break;
 80066c0:	e005      	b.n	80066ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80066c2:	2302      	movs	r3, #2
 80066c4:	73fb      	strb	r3, [r7, #15]
    break;
 80066c6:	e002      	b.n	80066ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80066c8:	2302      	movs	r3, #2
 80066ca:	73fb      	strb	r3, [r7, #15]
    break;
 80066cc:	bf00      	nop
  }
  return usb_status;
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	6039      	str	r1, [r7, #0]
 80066e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2212      	movs	r2, #18
 80066ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80066ee:	4b03      	ldr	r3, [pc, #12]	; (80066fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	20000148 	.word	0x20000148

08006700 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	6039      	str	r1, [r7, #0]
 800670a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2204      	movs	r2, #4
 8006710:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006712:	4b03      	ldr	r3, [pc, #12]	; (8006720 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	2000015c 	.word	0x2000015c

08006724 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	6039      	str	r1, [r7, #0]
 800672e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d105      	bne.n	8006742 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	4907      	ldr	r1, [pc, #28]	; (8006758 <USBD_FS_ProductStrDescriptor+0x34>)
 800673a:	4808      	ldr	r0, [pc, #32]	; (800675c <USBD_FS_ProductStrDescriptor+0x38>)
 800673c:	f7ff f932 	bl	80059a4 <USBD_GetString>
 8006740:	e004      	b.n	800674c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	4904      	ldr	r1, [pc, #16]	; (8006758 <USBD_FS_ProductStrDescriptor+0x34>)
 8006746:	4805      	ldr	r0, [pc, #20]	; (800675c <USBD_FS_ProductStrDescriptor+0x38>)
 8006748:	f7ff f92c 	bl	80059a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800674c:	4b02      	ldr	r3, [pc, #8]	; (8006758 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20001148 	.word	0x20001148
 800675c:	080069f0 	.word	0x080069f0

08006760 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	6039      	str	r1, [r7, #0]
 800676a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	4904      	ldr	r1, [pc, #16]	; (8006780 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006770:	4804      	ldr	r0, [pc, #16]	; (8006784 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006772:	f7ff f917 	bl	80059a4 <USBD_GetString>
  return USBD_StrDesc;
 8006776:	4b02      	ldr	r3, [pc, #8]	; (8006780 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20001148 	.word	0x20001148
 8006784:	08006a08 	.word	0x08006a08

08006788 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	4603      	mov	r3, r0
 8006790:	6039      	str	r1, [r7, #0]
 8006792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	221a      	movs	r2, #26
 8006798:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800679a:	f000 f843 	bl	8006824 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800679e:	4b02      	ldr	r3, [pc, #8]	; (80067a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000160 	.word	0x20000160

080067ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	6039      	str	r1, [r7, #0]
 80067b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d105      	bne.n	80067ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	4907      	ldr	r1, [pc, #28]	; (80067e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80067c2:	4808      	ldr	r0, [pc, #32]	; (80067e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80067c4:	f7ff f8ee 	bl	80059a4 <USBD_GetString>
 80067c8:	e004      	b.n	80067d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	4904      	ldr	r1, [pc, #16]	; (80067e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80067ce:	4805      	ldr	r0, [pc, #20]	; (80067e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80067d0:	f7ff f8e8 	bl	80059a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067d4:	4b02      	ldr	r3, [pc, #8]	; (80067e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20001148 	.word	0x20001148
 80067e4:	08006a1c 	.word	0x08006a1c

080067e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	6039      	str	r1, [r7, #0]
 80067f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067f4:	79fb      	ldrb	r3, [r7, #7]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	4907      	ldr	r1, [pc, #28]	; (800681c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80067fe:	4808      	ldr	r0, [pc, #32]	; (8006820 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006800:	f7ff f8d0 	bl	80059a4 <USBD_GetString>
 8006804:	e004      	b.n	8006810 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	4904      	ldr	r1, [pc, #16]	; (800681c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800680a:	4805      	ldr	r0, [pc, #20]	; (8006820 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800680c:	f7ff f8ca 	bl	80059a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006810:	4b02      	ldr	r3, [pc, #8]	; (800681c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20001148 	.word	0x20001148
 8006820:	08006a28 	.word	0x08006a28

08006824 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800682a:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <Get_SerialNum+0x44>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006830:	4b0e      	ldr	r3, [pc, #56]	; (800686c <Get_SerialNum+0x48>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006836:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <Get_SerialNum+0x4c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4413      	add	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d009      	beq.n	800685e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800684a:	2208      	movs	r2, #8
 800684c:	4909      	ldr	r1, [pc, #36]	; (8006874 <Get_SerialNum+0x50>)
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 f814 	bl	800687c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006854:	2204      	movs	r2, #4
 8006856:	4908      	ldr	r1, [pc, #32]	; (8006878 <Get_SerialNum+0x54>)
 8006858:	68b8      	ldr	r0, [r7, #8]
 800685a:	f000 f80f 	bl	800687c <IntToUnicode>
  }
}
 800685e:	bf00      	nop
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	1ffff7ac 	.word	0x1ffff7ac
 800686c:	1ffff7b0 	.word	0x1ffff7b0
 8006870:	1ffff7b4 	.word	0x1ffff7b4
 8006874:	20000162 	.word	0x20000162
 8006878:	20000172 	.word	0x20000172

0800687c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	4613      	mov	r3, r2
 8006888:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]
 8006892:	e027      	b.n	80068e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	0f1b      	lsrs	r3, r3, #28
 8006898:	2b09      	cmp	r3, #9
 800689a:	d80b      	bhi.n	80068b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	0f1b      	lsrs	r3, r3, #28
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	4619      	mov	r1, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	440b      	add	r3, r1
 80068ac:	3230      	adds	r2, #48	; 0x30
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	e00a      	b.n	80068ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	0f1b      	lsrs	r3, r3, #28
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	4619      	mov	r1, r3
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	440b      	add	r3, r1
 80068c4:	3237      	adds	r2, #55	; 0x37
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	3301      	adds	r3, #1
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	4413      	add	r3, r2
 80068da:	2200      	movs	r2, #0
 80068dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80068de:	7dfb      	ldrb	r3, [r7, #23]
 80068e0:	3301      	adds	r3, #1
 80068e2:	75fb      	strb	r3, [r7, #23]
 80068e4:	7dfa      	ldrb	r2, [r7, #23]
 80068e6:	79fb      	ldrb	r3, [r7, #7]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d3d3      	bcc.n	8006894 <IntToUnicode+0x18>
  }
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80068f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006930 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80068fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80068fe:	e003      	b.n	8006908 <LoopCopyDataInit>

08006900 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006900:	4b0c      	ldr	r3, [pc, #48]	; (8006934 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006902:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006904:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006906:	3104      	adds	r1, #4

08006908 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006908:	480b      	ldr	r0, [pc, #44]	; (8006938 <LoopForever+0xa>)
	ldr	r3, =_edata
 800690a:	4b0c      	ldr	r3, [pc, #48]	; (800693c <LoopForever+0xe>)
	adds	r2, r0, r1
 800690c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800690e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006910:	d3f6      	bcc.n	8006900 <CopyDataInit>
	ldr	r2, =_sbss
 8006912:	4a0b      	ldr	r2, [pc, #44]	; (8006940 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006914:	e002      	b.n	800691c <LoopFillZerobss>

08006916 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006916:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006918:	f842 3b04 	str.w	r3, [r2], #4

0800691c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800691c:	4b09      	ldr	r3, [pc, #36]	; (8006944 <LoopForever+0x16>)
	cmp	r2, r3
 800691e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006920:	d3f9      	bcc.n	8006916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006922:	f7ff fb0f 	bl	8005f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006926:	f000 f811 	bl	800694c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800692a:	f7ff f919 	bl	8005b60 <main>

0800692e <LoopForever>:

LoopForever:
    b LoopForever
 800692e:	e7fe      	b.n	800692e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006930:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8006934:	08006a78 	.word	0x08006a78
	ldr	r0, =_sdata
 8006938:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800693c:	2000017c 	.word	0x2000017c
	ldr	r2, =_sbss
 8006940:	2000017c 	.word	0x2000017c
	ldr	r3, = _ebss
 8006944:	20001348 	.word	0x20001348

08006948 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006948:	e7fe      	b.n	8006948 <ADC1_IRQHandler>
	...

0800694c <__libc_init_array>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	4e0d      	ldr	r6, [pc, #52]	; (8006984 <__libc_init_array+0x38>)
 8006950:	4c0d      	ldr	r4, [pc, #52]	; (8006988 <__libc_init_array+0x3c>)
 8006952:	1ba4      	subs	r4, r4, r6
 8006954:	10a4      	asrs	r4, r4, #2
 8006956:	2500      	movs	r5, #0
 8006958:	42a5      	cmp	r5, r4
 800695a:	d109      	bne.n	8006970 <__libc_init_array+0x24>
 800695c:	4e0b      	ldr	r6, [pc, #44]	; (800698c <__libc_init_array+0x40>)
 800695e:	4c0c      	ldr	r4, [pc, #48]	; (8006990 <__libc_init_array+0x44>)
 8006960:	f000 f820 	bl	80069a4 <_init>
 8006964:	1ba4      	subs	r4, r4, r6
 8006966:	10a4      	asrs	r4, r4, #2
 8006968:	2500      	movs	r5, #0
 800696a:	42a5      	cmp	r5, r4
 800696c:	d105      	bne.n	800697a <__libc_init_array+0x2e>
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006974:	4798      	blx	r3
 8006976:	3501      	adds	r5, #1
 8006978:	e7ee      	b.n	8006958 <__libc_init_array+0xc>
 800697a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800697e:	4798      	blx	r3
 8006980:	3501      	adds	r5, #1
 8006982:	e7f2      	b.n	800696a <__libc_init_array+0x1e>
 8006984:	08006a70 	.word	0x08006a70
 8006988:	08006a70 	.word	0x08006a70
 800698c:	08006a70 	.word	0x08006a70
 8006990:	08006a74 	.word	0x08006a74

08006994 <memset>:
 8006994:	4402      	add	r2, r0
 8006996:	4603      	mov	r3, r0
 8006998:	4293      	cmp	r3, r2
 800699a:	d100      	bne.n	800699e <memset+0xa>
 800699c:	4770      	bx	lr
 800699e:	f803 1b01 	strb.w	r1, [r3], #1
 80069a2:	e7f9      	b.n	8006998 <memset+0x4>

080069a4 <_init>:
 80069a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a6:	bf00      	nop
 80069a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069aa:	bc08      	pop	{r3}
 80069ac:	469e      	mov	lr, r3
 80069ae:	4770      	bx	lr

080069b0 <_fini>:
 80069b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b2:	bf00      	nop
 80069b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069b6:	bc08      	pop	{r3}
 80069b8:	469e      	mov	lr, r3
 80069ba:	4770      	bx	lr
